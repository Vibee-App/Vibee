/**
 * @param attributeName
 * @param noDomMeasure  If there are any measurement operation, the handler will be invoked after connected
 * @returns
 */
export function registerAttributeHandler(attributeName, noDomMeasure) {
    return function (target, context) {
        if (context.kind === 'method') {
            context.addInitializer(function () {
                const handlerObj = {
                    handler: target,
                    noDomMeasure,
                };
                this.attributeChangedHandler
                    ? (this.attributeChangedHandler[attributeName] = handlerObj)
                    : (this.attributeChangedHandler = { [attributeName]: handlerObj });
            });
        }
        else if (context.kind === 'field') {
            return function (value) {
                const handlerObj = {
                    handler: value,
                    noDomMeasure,
                };
                this.attributeChangedHandler
                    ? (this.attributeChangedHandler[attributeName] = handlerObj)
                    : (this.attributeChangedHandler = { [attributeName]: handlerObj });
                return value;
            };
        }
        else {
            throw new Error(`[lynx-web-components] decorator type ${context.kind} is not supported`);
        }
    };
}
//# sourceMappingURL=registerAttributeHandler.js.map