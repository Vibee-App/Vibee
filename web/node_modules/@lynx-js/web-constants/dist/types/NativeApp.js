// Copyright 2023 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
export var IdentifierType;
(function (IdentifierType) {
    IdentifierType[IdentifierType["ID_SELECTOR"] = 0] = "ID_SELECTOR";
    /**
     * @deprecated
     */
    IdentifierType[IdentifierType["REF_ID"] = 1] = "REF_ID";
    IdentifierType[IdentifierType["UNIQUE_ID"] = 2] = "UNIQUE_ID";
})(IdentifierType || (IdentifierType = {}));
/**
 * const enum will be shakedown in Typescript Compiler
 */
export var ErrorCode;
(function (ErrorCode) {
    ErrorCode[ErrorCode["SUCCESS"] = 0] = "SUCCESS";
    ErrorCode[ErrorCode["UNKNOWN"] = 1] = "UNKNOWN";
    ErrorCode[ErrorCode["NODE_NOT_FOUND"] = 2] = "NODE_NOT_FOUND";
    ErrorCode[ErrorCode["METHOD_NOT_FOUND"] = 3] = "METHOD_NOT_FOUND";
    ErrorCode[ErrorCode["PARAM_INVALID"] = 4] = "PARAM_INVALID";
    ErrorCode[ErrorCode["SELECTOR_NOT_SUPPORTED"] = 5] = "SELECTOR_NOT_SUPPORTED";
    ErrorCode[ErrorCode["NO_UI_FOR_NODE"] = 6] = "NO_UI_FOR_NODE";
})(ErrorCode || (ErrorCode = {}));
export var DispatchEventResult;
(function (DispatchEventResult) {
    // Event was not canceled by event handler or default event handler.
    DispatchEventResult[DispatchEventResult["NotCanceled"] = 0] = "NotCanceled";
    // Event was canceled by event handler; i.e. a script handler calling
    // preventDefault.
    DispatchEventResult[DispatchEventResult["CanceledByEventHandler"] = 1] = "CanceledByEventHandler";
    // Event was canceled by the default event handler; i.e. executing the default
    // action.  This result should be used sparingly as it deviates from the DOM
    // Event Dispatch model. Default event handlers really shouldn't be invoked
    // inside of dispatch.
    DispatchEventResult[DispatchEventResult["CanceledByDefaultEventHandler"] = 2] = "CanceledByDefaultEventHandler";
    // Event was canceled but suppressed before dispatched to event handler.  This
    // result should be used sparingly; and its usage likely indicates there is
    // potential for a bug. Trusted events may return this code; but untrusted
    // events likely should always execute the event handler the developer intends
    // to execute.
    DispatchEventResult[DispatchEventResult["CanceledBeforeDispatch"] = 3] = "CanceledBeforeDispatch";
})(DispatchEventResult || (DispatchEventResult = {}));
//# sourceMappingURL=NativeApp.js.map