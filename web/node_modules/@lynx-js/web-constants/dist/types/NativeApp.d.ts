import type { CloneableObject } from './Cloneable.js';
import type { PerformancePipelineOptions } from './Performance.js';
export declare const enum IdentifierType {
    ID_SELECTOR = 0,// css selector
    /**
     * @deprecated
     */
    REF_ID = 1,
    UNIQUE_ID = 2
}
export type LynxKernelInject = {
    init: (opt: {
        tt: LynxKernelInject;
    }) => void;
    buildVersion?: string;
};
export interface EventEmitter {
    addListener(eventName: string, listener: (...args: unknown[]) => void, context?: object): void;
    removeListener(eventName: string, listener: (...args: unknown[]) => void): void;
    emit(eventName: string, data: unknown): void;
    removeAllListeners(eventName?: string): void;
    trigger(eventName: string, params: string | Record<any, any>): void;
    toggle(eventName: string, ...data: unknown[]): void;
}
export type NativeTTObject = {
    lynx: unknown;
    OnLifecycleEvent: (...args: unknown[]) => void;
    publicComponentEvent(componentId: string, handlerName: string, eventData?: unknown): void;
    publishEvent(handlerName: string, data?: unknown): void;
    GlobalEventEmitter: EventEmitter;
    lynxCoreInject: any;
    updateCardData: (newData: Record<string, any>, options?: Record<string, any>) => void;
    onNativeAppReady: () => void;
    globalThis?: {
        tt: NativeTTObject;
    };
};
export type BundleInitReturnObj = {
    /**
     * On the web platform
     * @param opt
     * @returns
     */
    init: (opt: {
        tt: NativeTTObject;
    }) => unknown;
    buildVersion?: string;
};
/**
 * const enum will be shakedown in Typescript Compiler
 */
export declare const enum ErrorCode {
    SUCCESS = 0,
    UNKNOWN = 1,
    NODE_NOT_FOUND = 2,
    METHOD_NOT_FOUND = 3,
    PARAM_INVALID = 4,
    SELECTOR_NOT_SUPPORTED = 5,
    NO_UI_FOR_NODE = 6
}
export interface InvokeCallbackRes {
    code: ErrorCode;
    data?: string;
}
export declare enum DispatchEventResult {
    NotCanceled = 0,
    CanceledByEventHandler = 1,
    CanceledByDefaultEventHandler = 2,
    CanceledBeforeDispatch = 3
}
export interface ContextProxy {
    onTriggerEvent?: (event: MessageEvent) => void;
    postMessage(message: any): void;
    dispatchEvent(event: MessageEvent): DispatchEventResult;
    addEventListener(type: string, listener: (event: MessageEvent) => void): void;
    removeEventListener(type: string, listener: (event: MessageEvent) => void): void;
}
export interface NativeApp {
    id: string;
    callLepusMethod(name: string, data: unknown, callback: (ret: unknown) => void): void;
    setTimeout: typeof setTimeout;
    setInterval: typeof setInterval;
    clearTimeout: typeof clearTimeout;
    clearInterval: typeof clearInterval;
    requestAnimationFrame: (cb: () => void) => void;
    cancelAnimationFrame: (id: number) => void;
    loadScript: (sourceURL: string) => BundleInitReturnObj;
    loadScriptAsync(sourceURL: string, callback: (message: string | null, exports?: BundleInitReturnObj) => void): void;
    nativeModuleProxy: Record<string, any>;
    setNativeProps: (type: IdentifierType, identifier: string, component_id: string, first_only: boolean, native_props: Record<string, unknown>, root_unique_id: number | undefined) => void;
    invokeUIMethod: (type: IdentifierType, identifier: string, component_id: string, method: string, params: object, callback: (ret: InvokeCallbackRes) => void, root_unique_id: number) => void;
    setCard(tt: NativeTTObject): void;
    generatePipelineOptions: () => PerformancePipelineOptions;
    onPipelineStart: (pipeline_id: string) => void;
    markPipelineTiming: (pipeline_id: string, timing_key: string) => void;
    bindPipelineIdWithTimingFlag: (pipeline_id: string, timing_flag: string) => void;
    triggerComponentEvent(id: string, params: {
        eventDetail: CloneableObject;
        eventOption: CloneableObject;
        componentId: string;
    }): void;
    selectComponent(componentId: string, idSelector: string, single: boolean, callback?: () => void): void;
    createJSObjectDestructionObserver(callback: (...args: unknown[]) => unknown): {};
}
