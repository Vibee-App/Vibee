import { __esDecorate, __runInitializers, __setFunctionName } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { bindToAttribute, genDomGetter, registerAttributeHandler, } from '@lynx-js/web-elements-reactive';
/**
 * shared by x-input and x-input-ng
 */
let InputBaseAttributes = (() => {
    let _instanceExtraInitializers = [];
    let _private_handlerConfirmType_decorators;
    let _private_handlerConfirmType_initializers = [];
    let _private_handlerConfirmType_extraInitializers = [];
    let _private_handlerMaxlength_decorators;
    let _private_handlerMaxlength_initializers = [];
    let _private_handlerMaxlength_extraInitializers = [];
    let _private_handleReadonly_decorators;
    let _private_handleReadonly_initializers = [];
    let _private_handleReadonly_extraInitializers = [];
    let _private_handleType_decorators;
    let _private_handleType_descriptor;
    let _private_handleSpellCheck_decorators;
    let _private_handleSpellCheck_initializers = [];
    let _private_handleSpellCheck_extraInitializers = [];
    return class InputBaseAttributes {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_handlerConfirmType_decorators = [registerAttributeHandler('confirm-type', true)];
            _private_handlerMaxlength_decorators = [registerAttributeHandler('maxlength', true)];
            _private_handleReadonly_decorators = [registerAttributeHandler('readonly', true)];
            _private_handleType_decorators = [registerAttributeHandler('type', true)];
            _private_handleSpellCheck_decorators = [registerAttributeHandler('ios-spell-check', true), registerAttributeHandler('spell-check', true)];
            __esDecorate(this, _private_handleType_descriptor = { value: __setFunctionName(function (value) {
                    const attributeValue = value;
                    // @see https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
                    let inputMode = 'text';
                    let inputType = 'text';
                    if (attributeValue === 'digit') {
                        inputMode = 'numeric';
                        inputType = 'number';
                    }
                    else if (attributeValue === 'number') {
                        inputMode = 'decimal';
                        inputType = 'number';
                    }
                    else if (attributeValue === 'email') {
                        inputMode = 'email';
                    }
                    else if (attributeValue === 'tel') {
                        inputMode = 'tel';
                    }
                    else {
                        inputType = attributeValue;
                    }
                    this.#setInputmode(inputMode);
                    this.#setType(inputType);
                }, "#handleType") }, _private_handleType_decorators, { kind: "method", name: "#handleType", static: false, private: true, access: { has: obj => #handleType in obj, get: obj => obj.#handleType }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(null, null, _private_handlerConfirmType_decorators, { kind: "field", name: "#handlerConfirmType", static: false, private: true, access: { has: obj => #handlerConfirmType in obj, get: obj => obj.#handlerConfirmType, set: (obj, value) => { obj.#handlerConfirmType = value; } }, metadata: _metadata }, _private_handlerConfirmType_initializers, _private_handlerConfirmType_extraInitializers);
            __esDecorate(null, null, _private_handlerMaxlength_decorators, { kind: "field", name: "#handlerMaxlength", static: false, private: true, access: { has: obj => #handlerMaxlength in obj, get: obj => obj.#handlerMaxlength, set: (obj, value) => { obj.#handlerMaxlength = value; } }, metadata: _metadata }, _private_handlerMaxlength_initializers, _private_handlerMaxlength_extraInitializers);
            __esDecorate(null, null, _private_handleReadonly_decorators, { kind: "field", name: "#handleReadonly", static: false, private: true, access: { has: obj => #handleReadonly in obj, get: obj => obj.#handleReadonly, set: (obj, value) => { obj.#handleReadonly = value; } }, metadata: _metadata }, _private_handleReadonly_initializers, _private_handleReadonly_extraInitializers);
            __esDecorate(null, null, _private_handleSpellCheck_decorators, { kind: "field", name: "#handleSpellCheck", static: false, private: true, access: { has: obj => #handleSpellCheck in obj, get: obj => obj.#handleSpellCheck, set: (obj, value) => { obj.#handleSpellCheck = value; } }, metadata: _metadata }, _private_handleSpellCheck_initializers, _private_handleSpellCheck_extraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = [
            'confirm-type',
            'maxlength',
            'readonly',
            'type',
            'ios-spell-check',
            'spell-check',
        ];
        #dom = __runInitializers(this, _instanceExtraInitializers);
        #inputType = 'text';
        #getInputElement = genDomGetter(() => this.#dom.shadowRoot, '#input');
        #handlerConfirmType = __runInitializers(this, _private_handlerConfirmType_initializers, bindToAttribute(this.#getInputElement, 'enterkeyhint', (val) => {
            if (val === null)
                return 'send';
            return val;
        }));
        #handlerMaxlength = (__runInitializers(this, _private_handlerConfirmType_extraInitializers), __runInitializers(this, _private_handlerMaxlength_initializers, bindToAttribute(this.#getInputElement, 'maxlength', (val) => {
            if (val === null)
                return '140';
            return val;
        })));
        #handleReadonly = (__runInitializers(this, _private_handlerMaxlength_extraInitializers), __runInitializers(this, _private_handleReadonly_initializers, bindToAttribute(this.#getInputElement, 'readonly', (value) => (value !== null ? '' : null))));
        #setType = (__runInitializers(this, _private_handleReadonly_extraInitializers), bindToAttribute(this.#getInputElement, 'type'));
        #setInputmode = bindToAttribute(this.#getInputElement, 'inputmode');
        get #handleType() { return _private_handleType_descriptor.value; }
        #handleSpellCheck = __runInitializers(this, _private_handleSpellCheck_initializers, bindToAttribute(this.#getInputElement, 'spellcheck', (value) => (value === null ? 'false' : 'true')));
        constructor(dom) {
            __runInitializers(this, _private_handleSpellCheck_extraInitializers);
            this.#dom = dom;
        }
    };
})();
export { InputBaseAttributes };
//# sourceMappingURL=InputBaseAttributes.js.map