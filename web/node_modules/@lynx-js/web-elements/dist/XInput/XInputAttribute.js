import { __esDecorate, __runInitializers, __setFunctionName } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { bindToAttribute, genDomGetter, registerAttributeHandler, } from '@lynx-js/web-elements-reactive';
/**
 * shared by x-input and x-input-ng
 */
let XInputAttribute = (() => {
    let _instanceExtraInitializers = [];
    let _private_handleValue_decorators;
    let _private_handleValue_descriptor;
    let _private_handleDisabled_decorators;
    let _private_handleDisabled_initializers = [];
    let _private_handleDisabled_extraInitializers = [];
    return class XInputAttribute {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_handleValue_decorators = [registerAttributeHandler('value', false)];
            _private_handleDisabled_decorators = [registerAttributeHandler('disabled', true)];
            __esDecorate(this, _private_handleValue_descriptor = { value: __setFunctionName(function (newValue) {
                    if (newValue) {
                        const maxlength = parseFloat(this.#dom.getAttribute('maxlength') ?? '');
                        if (!isNaN(maxlength))
                            newValue = newValue.substring(0, maxlength);
                    }
                    else {
                        newValue = '';
                    }
                    const input = this.#getInputElement();
                    if (input.value !== newValue) {
                        input.value = newValue;
                    }
                }, "#handleValue") }, _private_handleValue_decorators, { kind: "method", name: "#handleValue", static: false, private: true, access: { has: obj => #handleValue in obj, get: obj => obj.#handleValue }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(null, null, _private_handleDisabled_decorators, { kind: "field", name: "#handleDisabled", static: false, private: true, access: { has: obj => #handleDisabled in obj, get: obj => obj.#handleDisabled, set: (obj, value) => { obj.#handleDisabled = value; } }, metadata: _metadata }, _private_handleDisabled_initializers, _private_handleDisabled_extraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = ['value', 'disabled'];
        #dom = __runInitializers(this, _instanceExtraInitializers);
        #getInputElement = genDomGetter(() => this.#dom.shadowRoot, '#input');
        get #handleValue() { return _private_handleValue_descriptor.value; }
        #handleDisabled = __runInitializers(this, _private_handleDisabled_initializers, bindToAttribute(this.#getInputElement, 'disabled', (value) => (value !== null ? '' : null)));
        constructor(dom) {
            __runInitializers(this, _private_handleDisabled_extraInitializers);
            this.#dom = dom;
        }
    };
})();
export { XInputAttribute };
//# sourceMappingURL=XInputAttribute.js.map