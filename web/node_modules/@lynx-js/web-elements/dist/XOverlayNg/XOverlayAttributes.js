import { __esDecorate, __runInitializers, __setFunctionName } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { commonComponentEventSetting } from '../common/commonEventInitConfiguration.js';
import { registerAttributeHandler, genDomGetter, } from '@lynx-js/web-elements-reactive';
let XOverlayAttributes = (() => {
    let _instanceExtraInitializers = [];
    let _private_handleEventsPassThrough_decorators;
    let _private_handleEventsPassThrough_descriptor;
    let _private_handleVisible_decorators;
    let _private_handleVisible_descriptor;
    return class XOverlayAttributes {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_handleEventsPassThrough_decorators = [registerAttributeHandler('events-pass-through', true)];
            _private_handleVisible_decorators = [registerAttributeHandler('visible', false)];
            __esDecorate(this, _private_handleEventsPassThrough_descriptor = { value: __setFunctionName(function (newVal) {
                    if (newVal !== null) {
                        this.#getDialogDom().addEventListener('click', this.#portalEventToMainDocument, { passive: false });
                        this.#dom.addEventListener('click', this.#portalEventToMainDocument, {
                            passive: false,
                        });
                    }
                    else {
                        this.#getDialogDom().removeEventListener('click', this.#portalEventToMainDocument);
                        this.#dom.removeEventListener('click', this.#portalEventToMainDocument);
                    }
                }, "#handleEventsPassThrough") }, _private_handleEventsPassThrough_decorators, { kind: "method", name: "#handleEventsPassThrough", static: false, private: true, access: { has: obj => #handleEventsPassThrough in obj, get: obj => obj.#handleEventsPassThrough }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, _private_handleVisible_descriptor = { value: __setFunctionName(function (newVal) {
                    this.#visible = newVal !== null;
                    if (this.#useModernDialog) {
                        if (this.#visible) {
                            this.#getDialogDom().showModal();
                            this.#dom.dispatchEvent(new CustomEvent('showoverlay', commonComponentEventSetting));
                        }
                        else {
                            this.#getDialogDom().close();
                            this.#dom.dispatchEvent(new CustomEvent('dismissoverlay', commonComponentEventSetting));
                        }
                    }
                }, "#handleVisible") }, _private_handleVisible_decorators, { kind: "method", name: "#handleVisible", static: false, private: true, access: { has: obj => #handleVisible in obj, get: obj => obj.#handleVisible }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = ['visible', 'events-pass-through'];
        #dom = __runInitializers(this, _instanceExtraInitializers);
        #useModernDialog = !!window.HTMLDialogElement;
        #visible = false;
        constructor(dom) {
            this.#dom = dom;
        }
        #getDialogDom = genDomGetter(() => this.#dom.shadowRoot, '#dialog');
        get #handleEventsPassThrough() { return _private_handleEventsPassThrough_descriptor.value; }
        get #handleVisible() { return _private_handleVisible_descriptor.value; }
        #portalEventToMainDocument = (e) => {
            e.stopPropagation();
            const diaglogDom = this.#getDialogDom();
            if (e.target === this.#dom || e.target === diaglogDom) {
                diaglogDom.close();
                const { clientX, clientY } = e;
                const targetElemnt = document.elementFromPoint(clientX, clientY);
                targetElemnt?.dispatchEvent(new MouseEvent('click', e));
                requestAnimationFrame(() => {
                    if (this.#visible && diaglogDom.isConnected) {
                        diaglogDom.showModal();
                    }
                });
            }
        };
        connectedCallback() {
            if (!this.#useModernDialog) {
                this.#getDialogDom().style.display = 'none';
            }
        }
    };
})();
export { XOverlayAttributes };
//# sourceMappingURL=XOverlayAttributes.js.map