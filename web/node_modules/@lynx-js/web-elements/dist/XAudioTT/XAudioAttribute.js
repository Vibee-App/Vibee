/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { __esDecorate, __runInitializers, __setFunctionName } from "tslib";
import { bindToAttribute, genDomGetter, registerAttributeHandler, } from '@lynx-js/web-elements-reactive';
import { XAudioErrorCode, xAudioBlob, xAudioSrc } from './utils.js';
import { commonComponentEventSetting } from '../common/commonEventInitConfiguration.js';
let XAudioAttribute = (() => {
    let _instanceExtraInitializers = [];
    let _private_handleSrc_decorators;
    let _private_handleSrc_descriptor;
    let _private_handleLoop_decorators;
    let _private_handleLoop_initializers = [];
    let _private_handleLoop_extraInitializers = [];
    let _private_handlePauseOnHide_decorators;
    let _private_handlePauseOnHide_descriptor;
    return class XAudioAttribute {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_handleSrc_decorators = [registerAttributeHandler('src', true)];
            _private_handleLoop_decorators = [registerAttributeHandler('loop', true)];
            _private_handlePauseOnHide_decorators = [registerAttributeHandler('pause-on-hide', true)];
            __esDecorate(this, _private_handleSrc_descriptor = { value: __setFunctionName(function (newValue) {
                    let parsedSrc;
                    try {
                        parsedSrc = JSON.parse(newValue || '') || {};
                    }
                    catch (error) {
                        console.error(`JSON.parse src error: ${error}`);
                        parsedSrc = {};
                    }
                    if (newValue === null) {
                        this.#dom.dispatchEvent(new CustomEvent('error', {
                            ...commonComponentEventSetting,
                            detail: {
                                code: XAudioErrorCode.SrcError,
                                msg: '',
                                from: 'res loader',
                                currentSrcID: this.#dom[xAudioSrc]?.id,
                            },
                        }));
                    }
                    else if (parsedSrc?.id === undefined || parsedSrc?.play_url === undefined) {
                        this.#dom.dispatchEvent(new CustomEvent('error', {
                            ...commonComponentEventSetting,
                            detail: {
                                code: XAudioErrorCode.SrcJsonError,
                                msg: '',
                                from: 'res loader',
                                currentSrcID: this.#dom[xAudioSrc]?.id,
                            },
                        }));
                    }
                    this.#dom[xAudioSrc] = parsedSrc;
                    this.#dom[xAudioBlob] = undefined;
                    this.#dom.stop();
                }, "#handleSrc") }, _private_handleSrc_decorators, { kind: "method", name: "#handleSrc", static: false, private: true, access: { has: obj => #handleSrc in obj, get: obj => obj.#handleSrc }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, _private_handlePauseOnHide_descriptor = { value: __setFunctionName(function (newValue) {
                    if (newValue !== null) {
                        document.addEventListener('visibilitychange', this.#documentVisibilitychange, { passive: true });
                    }
                    else {
                        document.removeEventListener('visibilitychange', this.#documentVisibilitychange);
                    }
                }, "#handlePauseOnHide") }, _private_handlePauseOnHide_decorators, { kind: "method", name: "#handlePauseOnHide", static: false, private: true, access: { has: obj => #handlePauseOnHide in obj, get: obj => obj.#handlePauseOnHide }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(null, null, _private_handleLoop_decorators, { kind: "field", name: "#handleLoop", static: false, private: true, access: { has: obj => #handleLoop in obj, get: obj => obj.#handleLoop, set: (obj, value) => { obj.#handleLoop = value; } }, metadata: _metadata }, _private_handleLoop_initializers, _private_handleLoop_extraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = [
            'src',
            'loop',
            'pause-on-hide',
        ];
        #dom = __runInitializers(this, _instanceExtraInitializers);
        #getAudioElement = genDomGetter(() => this.#dom.shadowRoot, '#audio');
        #setAudioSrc = bindToAttribute(this.#getAudioElement, 'src');
        get #handleSrc() { return _private_handleSrc_descriptor.value; }
        #handleLoop = __runInitializers(this, _private_handleLoop_initializers, bindToAttribute(this.#getAudioElement, 'loop'));
        #documentVisibilitychange = (__runInitializers(this, _private_handleLoop_extraInitializers), () => {
            if (document.visibilityState === 'hidden') {
                this.#dom.pause();
            }
        });
        get #handlePauseOnHide() { return _private_handlePauseOnHide_descriptor.value; }
        constructor(dom) {
            this.#dom = dom;
        }
    };
})();
export { XAudioAttribute };
//# sourceMappingURL=XAudioAttribute.js.map