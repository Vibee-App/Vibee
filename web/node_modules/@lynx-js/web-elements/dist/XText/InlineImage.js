import { __esDecorate, __runInitializers, __setFunctionName } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { Component, genDomGetter, html, registerAttributeHandler, } from '@lynx-js/web-elements-reactive';
let InlineImageAttributes = (() => {
    let _instanceExtraInitializers = [];
    let _private_handleSrc_decorators;
    let _private_handleSrc_descriptor;
    return class InlineImageAttributes {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_handleSrc_decorators = [registerAttributeHandler('src', true)];
            __esDecorate(this, _private_handleSrc_descriptor = { value: __setFunctionName(function (newVal) {
                    if (newVal)
                        this.#getImage().setAttribute('src', newVal);
                    else
                        this.#getImage().removeAttribute('src');
                }, "#handleSrc") }, _private_handleSrc_decorators, { kind: "method", name: "#handleSrc", static: false, private: true, access: { has: obj => #handleSrc in obj, get: obj => obj.#handleSrc }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = ['src'];
        #dom = __runInitializers(this, _instanceExtraInitializers);
        constructor(dom) {
            this.#dom = dom;
        }
        #getImage = genDomGetter(() => this.#dom.shadowRoot, '#img');
        get #handleSrc() { return _private_handleSrc_descriptor.value; }
    };
})();
export { InlineImageAttributes };
/**
 * @deprecated you can use `x-image` instead in `x-text`.
 */
let InlineImage = (() => {
    let _classDecorators = [Component('inline-image', [InlineImageAttributes], html ` <img id="img" part="img" /> `)];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = HTMLElement;
    var InlineImage = class extends _classSuper {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            InlineImage = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            __runInitializers(_classThis, _classExtraInitializers);
        }
    };
    return InlineImage = _classThis;
})();
export { InlineImage };
//# sourceMappingURL=InlineImage.js.map