import { __esDecorate, __runInitializers } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { Component, bindToStyle, registerAttributeHandler, } from '@lynx-js/web-elements-reactive';
import { LynxExposure } from '../common/Exposure.js';
import { commonComponentEventSetting } from '../common/commonEventInitConfiguration.js';
let XSvgFeatures = (() => {
    let _private_handleSrc_decorators;
    let _private_handleSrc_initializers = [];
    let _private_handleSrc_extraInitializers = [];
    let _private_handleContent_decorators;
    let _private_handleContent_initializers = [];
    let _private_handleContent_extraInitializers = [];
    return class XSvgFeatures {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_handleSrc_decorators = [registerAttributeHandler('src', true)];
            _private_handleContent_decorators = [registerAttributeHandler('content', true)];
            __esDecorate(null, null, _private_handleSrc_decorators, { kind: "field", name: "#handleSrc", static: false, private: true, access: { has: obj => #handleSrc in obj, get: obj => obj.#handleSrc, set: (obj, value) => { obj.#handleSrc = value; } }, metadata: _metadata }, _private_handleSrc_initializers, _private_handleSrc_extraInitializers);
            __esDecorate(null, null, _private_handleContent_decorators, { kind: "field", name: "#handleContent", static: false, private: true, access: { has: obj => #handleContent in obj, get: obj => obj.#handleContent, set: (obj, value) => { obj.#handleContent = value; } }, metadata: _metadata }, _private_handleContent_initializers, _private_handleContent_extraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = ['src', 'content'];
        #dom;
        #loadEventInvoker = new Image();
        #handleSrc = __runInitializers(this, _private_handleSrc_initializers, bindToStyle(() => this.#dom, 'background-image', (src) => {
            this.#loadEventInvoker.src = src;
            return `url(${src})`;
        }));
        #handleContent = (__runInitializers(this, _private_handleSrc_extraInitializers), __runInitializers(this, _private_handleContent_initializers, bindToStyle(() => this.#dom, 'background-image', (content) => {
            if (!content)
                return '';
            // https://stackoverflow.com/questions/23223718/failed-to-execute-btoa-on-window-the-string-to-be-encoded-contains-characte
            const src = 'data:image/svg+xml;base64,'
                + btoa(unescape(encodeURIComponent(content)));
            this.#loadEventInvoker.src = src;
            return `url("${src}")`;
        })));
        #fireLoadEvent = (__runInitializers(this, _private_handleContent_extraInitializers), () => {
            if (this.#dom.getAttribute('x-enable-load-event') === null)
                return;
            const { width, height } = this.#loadEventInvoker;
            this.#dom.dispatchEvent(new CustomEvent('load', {
                ...commonComponentEventSetting,
                detail: {
                    width,
                    height,
                },
            }));
        });
        constructor(dom) {
            this.#dom = dom;
            this.#loadEventInvoker.addEventListener('load', this.#fireLoadEvent);
        }
    };
})();
export { XSvgFeatures };
let XSvg = (() => {
    let _classDecorators = [Component('x-svg', [LynxExposure, XSvgFeatures])];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = HTMLElement;
    var XSvg = class extends _classSuper {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            XSvg = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            __runInitializers(_classThis, _classExtraInitializers);
        }
    };
    return XSvg = _classThis;
})();
export { XSvg };
//# sourceMappingURL=XSvg.js.map