import { __esDecorate, __runInitializers, __setFunctionName } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { bindToAttribute, bindToStyle, genDomGetter, registerAttributeHandler, } from '@lynx-js/web-elements-reactive';
let ImageSrc = (() => {
    let _instanceExtraInitializers = [];
    let _private_handleSrc_decorators;
    let _private_handleSrc_initializers = [];
    let _private_handleSrc_extraInitializers = [];
    let _private_preloadPlaceholder_decorators;
    let _private_preloadPlaceholder_descriptor;
    let _private_handleBlurRadius_decorators;
    let _private_handleBlurRadius_initializers = [];
    let _private_handleBlurRadius_extraInitializers = [];
    return class ImageSrc {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_handleSrc_decorators = [registerAttributeHandler('src', true)];
            _private_preloadPlaceholder_decorators = [registerAttributeHandler('placeholder', true)];
            _private_handleBlurRadius_decorators = [registerAttributeHandler('blur-radius', true)];
            __esDecorate(this, _private_preloadPlaceholder_descriptor = { value: __setFunctionName(function (newVal) {
                    if (newVal) {
                        new Image().src = newVal;
                    }
                }, "#preloadPlaceholder") }, _private_preloadPlaceholder_decorators, { kind: "method", name: "#preloadPlaceholder", static: false, private: true, access: { has: obj => #preloadPlaceholder in obj, get: obj => obj.#preloadPlaceholder }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(null, null, _private_handleSrc_decorators, { kind: "field", name: "#handleSrc", static: false, private: true, access: { has: obj => #handleSrc in obj, get: obj => obj.#handleSrc, set: (obj, value) => { obj.#handleSrc = value; } }, metadata: _metadata }, _private_handleSrc_initializers, _private_handleSrc_extraInitializers);
            __esDecorate(null, null, _private_handleBlurRadius_decorators, { kind: "field", name: "#handleBlurRadius", static: false, private: true, access: { has: obj => #handleBlurRadius in obj, get: obj => obj.#handleBlurRadius, set: (obj, value) => { obj.#handleBlurRadius = value; } }, metadata: _metadata }, _private_handleBlurRadius_initializers, _private_handleBlurRadius_extraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = ['src', 'placeholder', 'blur-radius'];
        #dom = __runInitializers(this, _instanceExtraInitializers);
        #getImg = genDomGetter(() => this.#dom.shadowRoot, '#img');
        #handleSrc = __runInitializers(this, _private_handleSrc_initializers, bindToAttribute(this.#getImg, 'src', (newval) => {
            return newval || this.#dom.getAttribute('placeholder');
        }));
        get #preloadPlaceholder() { return _private_preloadPlaceholder_descriptor.value; }
        #handleBlurRadius = (__runInitializers(this, _private_handleSrc_extraInitializers), __runInitializers(this, _private_handleBlurRadius_initializers, bindToStyle(this.#getImg, '--blur-radius', undefined, true)));
        #onImageError = (__runInitializers(this, _private_handleBlurRadius_extraInitializers), () => {
            const currentSrc = this.#getImg().src;
            const placeholder = this.#dom.getAttribute('placeholder');
            if (placeholder && currentSrc !== placeholder) {
                this.#getImg().src = placeholder;
            }
        });
        constructor(dom) {
            this.#dom = dom;
            this.#getImg().addEventListener('error', this.#onImageError);
        }
        connectedCallback() {
            if (this.#dom.getAttribute('src') === null
                || this.#dom.getAttribute('src') === '') {
                this.#handleSrc(null);
            }
        }
    };
})();
export { ImageSrc };
//# sourceMappingURL=ImageSrc.js.map