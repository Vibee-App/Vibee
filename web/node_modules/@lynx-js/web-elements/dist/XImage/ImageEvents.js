import { __esDecorate, __runInitializers, __setFunctionName } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { genDomGetter, registerAttributeHandler, } from '@lynx-js/web-elements-reactive';
import { commonComponentEventSetting } from '../common/commonEventInitConfiguration.js';
let ImageEvents = (() => {
    let _instanceExtraInitializers = [];
    let _private_enableLoadEvent_decorators;
    let _private_enableLoadEvent_descriptor;
    let _private_enableErrorEvent_decorators;
    let _private_enableErrorEvent_descriptor;
    return class ImageEvents {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_enableLoadEvent_decorators = [registerAttributeHandler('x-enable-load-event', true)];
            _private_enableErrorEvent_decorators = [registerAttributeHandler('x-enable-error-event', true)];
            __esDecorate(this, _private_enableLoadEvent_descriptor = { value: __setFunctionName(function (value) {
                    if (value === null) {
                        this.#getImg().removeEventListener('load', this.#teleportLoadEvent);
                    }
                    else {
                        this.#getImg().addEventListener('load', this.#teleportLoadEvent, {
                            passive: true,
                        });
                    }
                }, "#enableLoadEvent") }, _private_enableLoadEvent_decorators, { kind: "method", name: "#enableLoadEvent", static: false, private: true, access: { has: obj => #enableLoadEvent in obj, get: obj => obj.#enableLoadEvent }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, _private_enableErrorEvent_descriptor = { value: __setFunctionName(function (value) {
                    if (value === null) {
                        this.#getImg().removeEventListener('error', this.#teleportErrorEvent);
                    }
                    else {
                        this.#getImg().addEventListener('error', this.#teleportErrorEvent, {
                            passive: true,
                        });
                    }
                }, "#enableErrorEvent") }, _private_enableErrorEvent_decorators, { kind: "method", name: "#enableErrorEvent", static: false, private: true, access: { has: obj => #enableErrorEvent in obj, get: obj => obj.#enableErrorEvent }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = ['x-enable-load-event', 'x-enable-error-event'];
        #dom = __runInitializers(this, _instanceExtraInitializers);
        #getImg = genDomGetter(() => this.#dom.shadowRoot, '#img');
        get #enableLoadEvent() { return _private_enableLoadEvent_descriptor.value; }
        get #enableErrorEvent() { return _private_enableErrorEvent_descriptor.value; }
        #teleportLoadEvent = () => {
            this.#dom.dispatchEvent(new CustomEvent('load', {
                ...commonComponentEventSetting,
                detail: {
                    width: this.#getImg().naturalWidth,
                    height: this.#getImg().naturalHeight,
                },
            }));
        };
        #teleportErrorEvent = () => {
            this.#dom.dispatchEvent(new CustomEvent('error', {
                ...commonComponentEventSetting,
                detail: {},
            }));
        };
        constructor(dom) {
            this.#dom = dom;
        }
    };
})();
export { ImageEvents };
//# sourceMappingURL=ImageEvents.js.map