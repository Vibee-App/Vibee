import { __esDecorate, __runInitializers, __setFunctionName } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { registerAttributeHandler, genDomGetter, } from '@lynx-js/web-elements-reactive';
import { XRefreshIntersectionObserverEvent } from './XRefreshSubElementIntersectionObserver.js';
import { commonComponentEventSetting } from '../common/commonEventInitConfiguration.js';
let XRefreshViewEventsEmitter = (() => {
    let _instanceExtraInitializers = [];
    let _private_handleXEnableHeaderOffsetEvent_decorators;
    let _private_handleXEnableHeaderOffsetEvent_descriptor;
    let _private_handleXEnableHeaderShowEvent_decorators;
    let _private_handleXEnableHeaderShowEvent_descriptor;
    let _private_handleXEnableFooterOffsetEvent_decorators;
    let _private_handleXEnableFooterOffsetEvent_descriptor;
    let _private_handleXEnableStartRefreshEvent_decorators;
    let _private_handleXEnableStartRefreshEvent_descriptor;
    let _private_handleXEnableHeaderReleasedEvent_decorators;
    let _private_handleXEnableHeaderReleasedEvent_descriptor;
    let _private_handleXEnableStartLoadMoreEvent_decorators;
    let _private_handleXEnableStartLoadMoreEvent_descriptor;
    let _private_handleXEnableFooterReleasedEvent_decorators;
    let _private_handleXEnableFooterReleasedEvent_descriptor;
    return class XRefreshViewEventsEmitter {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_handleXEnableHeaderOffsetEvent_decorators = [registerAttributeHandler('x-enable-headeroffset-event', true)];
            _private_handleXEnableHeaderShowEvent_decorators = [registerAttributeHandler('x-enable-headershow-event', true)];
            _private_handleXEnableFooterOffsetEvent_decorators = [registerAttributeHandler('x-enable-footeroffset-event', true)];
            _private_handleXEnableStartRefreshEvent_decorators = [registerAttributeHandler('x-enable-startrefresh-event', true)];
            _private_handleXEnableHeaderReleasedEvent_decorators = [registerAttributeHandler('x-enable-headerreleased-event', true)];
            _private_handleXEnableStartLoadMoreEvent_decorators = [registerAttributeHandler('x-enable-startloadmore-event', true)];
            _private_handleXEnableFooterReleasedEvent_decorators = [registerAttributeHandler('x-enable-footerreleased-event', true)];
            __esDecorate(this, _private_handleXEnableHeaderOffsetEvent_descriptor = { value: __setFunctionName(function (newVal) {
                    this.#enableHeaderOffsetEvent = newVal !== null;
                    this.#handleComplexEventEnableAttributes();
                }, "#handleXEnableHeaderOffsetEvent") }, _private_handleXEnableHeaderOffsetEvent_decorators, { kind: "method", name: "#handleXEnableHeaderOffsetEvent", static: false, private: true, access: { has: obj => #handleXEnableHeaderOffsetEvent in obj, get: obj => obj.#handleXEnableHeaderOffsetEvent }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, _private_handleXEnableHeaderShowEvent_descriptor = { value: __setFunctionName(function (newVal) {
                    this.#enableHeaderShowEvent = newVal !== null;
                    this.#handleComplexEventEnableAttributes();
                }, "#handleXEnableHeaderShowEvent") }, _private_handleXEnableHeaderShowEvent_decorators, { kind: "method", name: "#handleXEnableHeaderShowEvent", static: false, private: true, access: { has: obj => #handleXEnableHeaderShowEvent in obj, get: obj => obj.#handleXEnableHeaderShowEvent }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, _private_handleXEnableFooterOffsetEvent_descriptor = { value: __setFunctionName(function (newVal) {
                    this.#enableFooterOffsetEvent = newVal !== null;
                    this.#handleComplexEventEnableAttributes();
                }, "#handleXEnableFooterOffsetEvent") }, _private_handleXEnableFooterOffsetEvent_decorators, { kind: "method", name: "#handleXEnableFooterOffsetEvent", static: false, private: true, access: { has: obj => #handleXEnableFooterOffsetEvent in obj, get: obj => obj.#handleXEnableFooterOffsetEvent }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, _private_handleXEnableStartRefreshEvent_descriptor = { value: __setFunctionName(function (newVal) {
                    this.#enableStartRefreshEvent = newVal !== null;
                    this.#handleSimpleEventEnableAttributes();
                }, "#handleXEnableStartRefreshEvent") }, _private_handleXEnableStartRefreshEvent_decorators, { kind: "method", name: "#handleXEnableStartRefreshEvent", static: false, private: true, access: { has: obj => #handleXEnableStartRefreshEvent in obj, get: obj => obj.#handleXEnableStartRefreshEvent }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, _private_handleXEnableHeaderReleasedEvent_descriptor = { value: __setFunctionName(function (newVal) {
                    this.#enableHeaderReleasedEvent = newVal !== null;
                    this.#handleSimpleEventEnableAttributes();
                }, "#handleXEnableHeaderReleasedEvent") }, _private_handleXEnableHeaderReleasedEvent_decorators, { kind: "method", name: "#handleXEnableHeaderReleasedEvent", static: false, private: true, access: { has: obj => #handleXEnableHeaderReleasedEvent in obj, get: obj => obj.#handleXEnableHeaderReleasedEvent }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, _private_handleXEnableStartLoadMoreEvent_descriptor = { value: __setFunctionName(function (newVal) {
                    this.#enableStartLoadMoreEvent = newVal !== null;
                    this.#handleSimpleEventEnableAttributes();
                }, "#handleXEnableStartLoadMoreEvent") }, _private_handleXEnableStartLoadMoreEvent_decorators, { kind: "method", name: "#handleXEnableStartLoadMoreEvent", static: false, private: true, access: { has: obj => #handleXEnableStartLoadMoreEvent in obj, get: obj => obj.#handleXEnableStartLoadMoreEvent }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, _private_handleXEnableFooterReleasedEvent_descriptor = { value: __setFunctionName(function (newVal) {
                    this.#enableFooterReleasedEvent = newVal !== null;
                    this.#handleSimpleEventEnableAttributes();
                }, "#handleXEnableFooterReleasedEvent") }, _private_handleXEnableFooterReleasedEvent_decorators, { kind: "method", name: "#handleXEnableFooterReleasedEvent", static: false, private: true, access: { has: obj => #handleXEnableFooterReleasedEvent in obj, get: obj => obj.#handleXEnableFooterReleasedEvent }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        #dom = __runInitializers(this, _instanceExtraInitializers);
        #enableStartRefreshEvent = false;
        #enableHeaderReleasedEvent = false;
        #enableHeaderOffsetEvent = false;
        #enableHeaderShowEvent = false;
        #enableStartLoadMoreEvent = false;
        #enableFooterReleasedEvent = false;
        #enableFooterOffsetEvent = false;
        static observedAttributes = [
            'x-enable-startrefresh-event',
            'x-enable-headerreleased-event',
            'x-enable-headeroffset-event',
            'x-enable-headershow-event',
            'x-enable-startloadmore-event',
            'x-enable-footerreleased-event',
            'x-enable-footeroffset-event',
        ];
        #getXRefreshHeader = genDomGetter(() => this.#dom, 'x-refresh-view > x-refresh-header:first-of-type');
        #getXRefreshFooter = genDomGetter(() => this.#dom, 'x-refresh-view > x-refresh-footer:first-of-type');
        constructor(dom) {
            this.#dom = dom;
            this.#dom.addEventListener(XRefreshIntersectionObserverEvent.EventName, this.#handleSubElementObserverEvent);
        }
        // complex events switches
        get #handleXEnableHeaderOffsetEvent() { return _private_handleXEnableHeaderOffsetEvent_descriptor.value; }
        get #handleXEnableHeaderShowEvent() { return _private_handleXEnableHeaderShowEvent_descriptor.value; }
        get #handleXEnableFooterOffsetEvent() { return _private_handleXEnableFooterOffsetEvent_descriptor.value; }
        #handleComplexEventEnableAttributes() {
            if (this.#enableHeaderOffsetEvent
                || this.#enableHeaderShowEvent
                || this.#enableFooterOffsetEvent) {
                this.#enableComplexRefreshViewEvents();
            }
            else {
                this.#disableComplexRefreshViewEvents();
            }
        }
        // simple events switches
        get #handleXEnableStartRefreshEvent() { return _private_handleXEnableStartRefreshEvent_descriptor.value; }
        get #handleXEnableHeaderReleasedEvent() { return _private_handleXEnableHeaderReleasedEvent_descriptor.value; }
        get #handleXEnableStartLoadMoreEvent() { return _private_handleXEnableStartLoadMoreEvent_descriptor.value; }
        get #handleXEnableFooterReleasedEvent() { return _private_handleXEnableFooterReleasedEvent_descriptor.value; }
        #handleSimpleEventEnableAttributes() {
            if (this.#enableHeaderReleasedEvent
                || this.#enableFooterReleasedEvent
                || this.#enableStartLoadMoreEvent
                || this.#enableStartRefreshEvent) {
                this.#enableSimpleRefreshViewEvents();
            }
            else {
                this.#disableSimpleRefreshViewEvents();
            }
        }
        /**
         * handle header/footer showing events
         */
        #headerShowing = false;
        #headerFullyShown = false;
        #footerShowing = false;
        #footerFullyShown = false;
        #handleSubElementObserverEvent = (e) => {
            e.stopPropagation();
            if (e.target.tagName === 'X-REFRESH-HEADER') {
                this.#headerShowing = e.startShowing;
                this.#headerFullyShown = e.fullyShowing;
            }
            else {
                this.#footerShowing = e.startShowing;
                this.#footerFullyShown = e.fullyShowing;
            }
        };
        /**
         * Event without dragging info;
         */
        #simpleRefreshViewEventsEnabled = false;
        #enableSimpleRefreshViewEvents() {
            if (this.#simpleRefreshViewEventsEnabled)
                return;
            this.#dom.addEventListener('touchend', this.#handleTouchEndForEvent);
            this.#simpleRefreshViewEventsEnabled = true;
        }
        #handleTouchEndForEvent = () => {
            if (this.#headerFullyShown) {
                this.#dom.dispatchEvent(new CustomEvent('headerreleased', commonComponentEventSetting));
                this.#dom.dispatchEvent(new CustomEvent('startrefresh', {
                    ...commonComponentEventSetting,
                    detail: { isManual: this.#dom._nextRefreshIsManual },
                }));
                this.#dom._nextRefreshIsManual = true;
            }
            else if ((this.#dom.getAttribute('enable-auto-loadmore') === 'true'
                && this.#footerShowing)
                || this.#footerFullyShown) {
                this.#dom.dispatchEvent(new CustomEvent('footerreleased', commonComponentEventSetting));
                this.#dom.dispatchEvent(new CustomEvent('startloadmore', commonComponentEventSetting));
            }
        };
        #disableSimpleRefreshViewEvents() {
            if (this.#simpleRefreshViewEventsEnabled) {
                this.#dom.removeEventListener('touchend', this.#handleTouchEndForEvent);
            }
        }
        /**
         * Event with dragging info
         */
        #dragging = false;
        #complexRefreshViewEventEnabled = false;
        #enableComplexRefreshViewEvents() {
            if (this.#complexRefreshViewEventEnabled)
                return;
            this.#dom.addEventListener('touchstart', this.#handleTouchStartForDraggingStatus);
            this.#dom.addEventListener('touchend', this.#handleTouchEndForDraggingStatus);
            this.#dom.addEventListener('touchcancel', this.#handleTouchEndForDraggingStatus);
            this.#dom
                .shadowRoot.querySelector('#container')
                .addEventListener('scroll', this.#handleScroll);
        }
        #handleTouchEndForDraggingStatus = () => {
            this.#dragging = false;
        };
        #handleTouchStartForDraggingStatus = () => {
            this.#dragging = true;
        };
        #handleScroll = () => {
            if (this.#headerShowing
                && (this.#enableHeaderShowEvent || this.#enableHeaderOffsetEvent)) {
                const header = this.#getXRefreshHeader();
                if (header) {
                    const height = parseFloat(getComputedStyle(header).height);
                    const scrollTop = this.#dom.shadowRoot.querySelector('#container').scrollTop;
                    this.#dom.dispatchEvent(new CustomEvent('headershow', {
                        ...commonComponentEventSetting,
                        detail: {
                            isDragging: this.#dragging,
                            offsetPercent: 1 - scrollTop / height,
                        },
                    }));
                    this.#dom.dispatchEvent(new CustomEvent('headeroffset', {
                        ...commonComponentEventSetting,
                        detail: {
                            isDragging: this.#dragging,
                            offsetPercent: 1 - scrollTop / height,
                        },
                    }));
                }
            }
            else if (this.#footerShowing && this.#enableFooterOffsetEvent) {
                const footer = this.#getXRefreshFooter();
                if (footer) {
                    const contentDom = this.#dom.shadowRoot.querySelector('#container');
                    const scrollTop = contentDom.scrollTop;
                    const scrollHeight = contentDom.scrollHeight;
                    const height = parseFloat(getComputedStyle(footer).height);
                    this.#dom.dispatchEvent(new CustomEvent('footeroffset', {
                        ...commonComponentEventSetting,
                        detail: {
                            isDragging: this.#dragging,
                            offsetPercent: 1 - scrollTop / height,
                        },
                    }));
                }
            }
        };
        #disableComplexRefreshViewEvents() {
            if (this.#complexRefreshViewEventEnabled) {
                this.#dom.removeEventListener('touchstart', this.#handleTouchStartForDraggingStatus);
                this.#dom.removeEventListener('touchend', this.#handleTouchEndForDraggingStatus);
                this.#dom.removeEventListener('touchcancel', this.#handleTouchEndForDraggingStatus);
                this.#dom
                    .shadowRoot.querySelector('#container')
                    .removeEventListener('scroll', this.#handleScroll);
            }
        }
        dispose() {
            this.#disableSimpleRefreshViewEvents();
            this.#disableComplexRefreshViewEvents();
        }
    };
})();
export { XRefreshViewEventsEmitter };
//# sourceMappingURL=XRefreshViewEventsEmitter.js.map