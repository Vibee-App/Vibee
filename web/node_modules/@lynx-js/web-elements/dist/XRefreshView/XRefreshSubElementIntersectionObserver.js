export class XRefreshIntersectionObserverEvent extends Event {
    startShowing;
    fullyShowing;
    static EventName = 'x-refresh-view-intersecting';
    constructor(startShowing, fullyShowing) {
        super(XRefreshIntersectionObserverEvent.EventName, {
            composed: false,
            cancelable: true,
            bubbles: true,
        });
        this.startShowing = startShowing;
        this.fullyShowing = fullyShowing;
    }
}
export class XRefreshSubElementIntersectionObserver {
    #dom;
    static observedAttributes = [];
    #intersectionObserver;
    constructor(dom) {
        this.#dom = dom;
    }
    connectedCallback() {
        if (IntersectionObserver && !this.#intersectionObserver) {
            const parent = this.#dom.parentElement;
            if (parent) {
                this.#intersectionObserver = new IntersectionObserver((intersectionEntries) => {
                    let isStartShowing = false;
                    let isFullyShowing = false;
                    intersectionEntries.forEach((e) => {
                        isStartShowing = e.intersectionRatio > 0;
                        isFullyShowing = e.intersectionRatio > 0.9;
                    });
                    this.#dom.dispatchEvent(new XRefreshIntersectionObserverEvent(isStartShowing, isFullyShowing));
                    if (isFullyShowing) {
                        this.#dom.setAttribute('x-magnet-enable', '');
                    }
                }, {
                    root: parent,
                    threshold: [0.1, 0.9], // set to 0.9 to get better user-experience
                });
                this.#intersectionObserver.observe(this.#dom);
            }
        }
    }
    dispose() {
        if (this.#intersectionObserver) {
            this.#intersectionObserver.disconnect();
            this.#intersectionObserver = undefined;
        }
    }
}
//# sourceMappingURL=XRefreshSubElementIntersectionObserver.js.map