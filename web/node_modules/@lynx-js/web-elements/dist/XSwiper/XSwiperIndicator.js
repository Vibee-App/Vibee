import { __esDecorate, __runInitializers } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { genDomGetter, registerAttributeHandler, bindToStyle, boostedQueueMicrotask, } from '@lynx-js/web-elements-reactive';
let XSwiperIndicator = (() => {
    let _private_handleIndicatorColor_decorators;
    let _private_handleIndicatorColor_initializers = [];
    let _private_handleIndicatorColor_extraInitializers = [];
    let _private_handleIndicatorActiveColor_decorators;
    let _private_handleIndicatorActiveColor_initializers = [];
    let _private_handleIndicatorActiveColor_extraInitializers = [];
    let _private_handlePageMargin_decorators;
    let _private_handlePageMargin_initializers = [];
    let _private_handlePageMargin_extraInitializers = [];
    let _private_handlePreviousMargin_decorators;
    let _private_handlePreviousMargin_initializers = [];
    let _private_handlePreviousMargin_extraInitializers = [];
    let _private_handleNextMargin_decorators;
    let _private_handleNextMargin_initializers = [];
    let _private_handleNextMargin_extraInitializers = [];
    return class XSwiperIndicator {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_handleIndicatorColor_decorators = [registerAttributeHandler('indicator-color', true)];
            _private_handleIndicatorActiveColor_decorators = [registerAttributeHandler('indicator-active-color', true)];
            _private_handlePageMargin_decorators = [registerAttributeHandler('page-margin', true)];
            _private_handlePreviousMargin_decorators = [registerAttributeHandler('previous-margin', true)];
            _private_handleNextMargin_decorators = [registerAttributeHandler('next-margin', true)];
            __esDecorate(null, null, _private_handleIndicatorColor_decorators, { kind: "field", name: "#handleIndicatorColor", static: false, private: true, access: { has: obj => #handleIndicatorColor in obj, get: obj => obj.#handleIndicatorColor, set: (obj, value) => { obj.#handleIndicatorColor = value; } }, metadata: _metadata }, _private_handleIndicatorColor_initializers, _private_handleIndicatorColor_extraInitializers);
            __esDecorate(null, null, _private_handleIndicatorActiveColor_decorators, { kind: "field", name: "#handleIndicatorActiveColor", static: false, private: true, access: { has: obj => #handleIndicatorActiveColor in obj, get: obj => obj.#handleIndicatorActiveColor, set: (obj, value) => { obj.#handleIndicatorActiveColor = value; } }, metadata: _metadata }, _private_handleIndicatorActiveColor_initializers, _private_handleIndicatorActiveColor_extraInitializers);
            __esDecorate(null, null, _private_handlePageMargin_decorators, { kind: "field", name: "#handlePageMargin", static: false, private: true, access: { has: obj => #handlePageMargin in obj, get: obj => obj.#handlePageMargin, set: (obj, value) => { obj.#handlePageMargin = value; } }, metadata: _metadata }, _private_handlePageMargin_initializers, _private_handlePageMargin_extraInitializers);
            __esDecorate(null, null, _private_handlePreviousMargin_decorators, { kind: "field", name: "#handlePreviousMargin", static: false, private: true, access: { has: obj => #handlePreviousMargin in obj, get: obj => obj.#handlePreviousMargin, set: (obj, value) => { obj.#handlePreviousMargin = value; } }, metadata: _metadata }, _private_handlePreviousMargin_initializers, _private_handlePreviousMargin_extraInitializers);
            __esDecorate(null, null, _private_handleNextMargin_decorators, { kind: "field", name: "#handleNextMargin", static: false, private: true, access: { has: obj => #handleNextMargin in obj, get: obj => obj.#handleNextMargin, set: (obj, value) => { obj.#handleNextMargin = value; } }, metadata: _metadata }, _private_handleNextMargin_initializers, _private_handleNextMargin_extraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = [
            'indicator-color',
            'indicator-active-color',
            'page-margin',
            'previous-margin',
            'next-margin',
        ];
        #dom;
        #numOfChildElement = 0;
        #getIndicatorContainer = genDomGetter(() => this.#dom.shadowRoot, '#indicator-container');
        #getIndicatorDynamicStyleContainer = genDomGetter(() => this.#dom.shadowRoot, '#indicator-style');
        #childrenElementMutationObserver;
        constructor(dom) {
            __runInitializers(this, _private_handleNextMargin_extraInitializers);
            this.#dom = dom;
        }
        #handleIndicatorColor = __runInitializers(this, _private_handleIndicatorColor_initializers, bindToStyle(this.#getIndicatorContainer, '--indicator-color', undefined, true));
        #handleIndicatorActiveColor = (__runInitializers(this, _private_handleIndicatorColor_extraInitializers), __runInitializers(this, _private_handleIndicatorActiveColor_initializers, bindToStyle(this.#getIndicatorContainer, '--indicator-active-color', undefined, true)));
        #handlePageMargin = (__runInitializers(this, _private_handleIndicatorActiveColor_extraInitializers), __runInitializers(this, _private_handlePageMargin_initializers, bindToStyle(this.#getIndicatorContainer, '--page-margin', undefined, true)));
        #handlePreviousMargin = (__runInitializers(this, _private_handlePageMargin_extraInitializers), __runInitializers(this, _private_handlePreviousMargin_initializers, bindToStyle(this.#getIndicatorContainer, '--previous-margin', undefined, true)));
        #handleNextMargin = (__runInitializers(this, _private_handlePreviousMargin_extraInitializers), __runInitializers(this, _private_handleNextMargin_initializers, bindToStyle(this.#getIndicatorContainer, '--next-margin', undefined, true)));
        #updateIndicatorDoms() {
            const currentNumber = this.#dom.childElementCount;
            if (currentNumber !== this.#numOfChildElement) {
                let nextInnerHtml = '';
                for (let ii = 0; ii < currentNumber; ii++) {
                    nextInnerHtml +=
                        `<div style="animation-timeline:--x-swiper-item-${ii};" part="indicator-item"></div>`;
                }
                this.#getIndicatorContainer().innerHTML = nextInnerHtml;
                if (currentNumber > 5) {
                    for (let ii = 0; ii < currentNumber; ii++) {
                        this.#dom.children.item(ii)?.style.setProperty('view-timeline-name', `--x-swiper-item-${ii}`);
                    }
                    this.#getIndicatorDynamicStyleContainer().innerHTML =
                        `:host { timeline-scope: ${Array.from({ length: currentNumber }, (_, ii) => `--x-swiper-item-${ii}`).join(',')} !important; }`;
                }
            }
            this.#numOfChildElement = currentNumber;
        }
        connectedCallback() {
            this.#updateIndicatorDoms();
            this.#childrenElementMutationObserver = new MutationObserver(this.#updateIndicatorDoms.bind(this));
            this.#childrenElementMutationObserver.observe(this.#dom, {
                attributes: false,
                characterData: false,
                childList: true,
                subtree: false,
            });
            if (!CSS.supports('timeline-scope', '--a, --b')) {
                this.#dom.setAttribute('x-enable-change-event-for-indicator', '');
                this.#dom.addEventListener('change', (({ detail }) => {
                    const currentPage = detail.current;
                    const numberOfChildren = this.#dom.childElementCount;
                    const indicatorContainer = this.#getIndicatorContainer();
                    for (let ii = 0; ii < numberOfChildren; ii++) {
                        const indicator = indicatorContainer.children[ii];
                        if (indicator) {
                            if (ii === currentPage) {
                                indicator.style.setProperty('background-color', 'var(--indicator-active-color)', 'important');
                            }
                            else {
                                indicator.style.removeProperty('background-color');
                            }
                        }
                    }
                }).bind(this));
                boostedQueueMicrotask(() => {
                    this.#getIndicatorContainer().children[this.#dom.current]?.style.setProperty('background-color', 'var(--indicator-active-color)', 'important');
                });
            }
        }
        dispose() {
            this.#childrenElementMutationObserver?.disconnect();
            this.#childrenElementMutationObserver = undefined;
        }
    };
})();
export { XSwiperIndicator };
//# sourceMappingURL=XSwiperIndicator.js.map