import { __esDecorate, __runInitializers, __setFunctionName } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { registerAttributeHandler, } from '@lynx-js/web-elements-reactive';
let XSwiperAutoScroll = (() => {
    let _instanceExtraInitializers = [];
    let _private_handleCurrentChange_decorators;
    let _private_handleCurrentChange_descriptor;
    let _private_handleAutoplay_decorators;
    let _private_handleAutoplay_descriptor;
    return class XSwiperAutoScroll {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_handleCurrentChange_decorators = [registerAttributeHandler('current', false)];
            _private_handleAutoplay_decorators = [registerAttributeHandler('interval', false), registerAttributeHandler('autoplay', false)];
            __esDecorate(this, _private_handleCurrentChange_descriptor = { value: __setFunctionName(function (newVal) {
                    const newval = Number(newVal);
                    if (!Number.isNaN(newval)) {
                        this.#dom.current = newval;
                    }
                }, "#handleCurrentChange") }, _private_handleCurrentChange_decorators, { kind: "method", name: "#handleCurrentChange", static: false, private: true, access: { has: obj => #handleCurrentChange in obj, get: obj => obj.#handleCurrentChange }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, _private_handleAutoplay_descriptor = { value: __setFunctionName(function () {
                    const enableAutoPlay = this.#dom.getAttribute('autoplay') !== null;
                    if (enableAutoPlay) {
                        const interval = this.#dom.getAttribute('interval');
                        let intervalValue = interval ? parseFloat(interval) : 5000;
                        if (Number.isNaN(intervalValue))
                            intervalValue = 5000;
                        this.#startAutoplay(intervalValue);
                    }
                }, "#handleAutoplay") }, _private_handleAutoplay_decorators, { kind: "method", name: "#handleAutoplay", static: false, private: true, access: { has: obj => #handleAutoplay in obj, get: obj => obj.#handleAutoplay }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = ['current', 'interval', 'autoplay'];
        #dom = __runInitializers(this, _instanceExtraInitializers);
        constructor(dom) {
            this.#dom = dom;
        }
        get #handleCurrentChange() { return _private_handleCurrentChange_descriptor.value; }
        #autoPlayTimer;
        #autoPlayTick = (() => {
            this.#dom.scrollToNext();
        }).bind(this);
        #startAutoplay(interval) {
            this.#stopAutoplay();
            this.#autoPlayTimer = setInterval(this.#autoPlayTick, interval);
        }
        #stopAutoplay() {
            if (this.#autoPlayTimer) {
                clearInterval(this.#autoPlayTimer);
            }
        }
        get #handleAutoplay() { return _private_handleAutoplay_descriptor.value; }
        dispose() {
            this.#stopAutoplay();
        }
    };
})();
export { XSwiperAutoScroll };
//# sourceMappingURL=XSwiperAutoScroll.js.map