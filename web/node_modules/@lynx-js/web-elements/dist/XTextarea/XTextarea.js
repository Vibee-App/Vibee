import { __esDecorate, __runInitializers } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { Component, genDomGetter, html } from '@lynx-js/web-elements-reactive';
import { Placeholder } from './Placeholder.js';
import { TextareaBaseAttributes } from './TextareaBaseAttributes.js';
import { XTextareaAttributes } from './XTextareaAttributes.js';
import { XTextareaEvents } from './XTextareaEvents.js';
import { LynxExposure } from '../common/Exposure.js';
// x-textarea
let XTextarea = (() => {
    let _classDecorators = [Component('x-textarea', [
            LynxExposure,
            Placeholder,
            TextareaBaseAttributes,
            XTextareaAttributes,
            XTextareaEvents,
        ], html `<style>
      #textarea:focus,
      #textarea:focus-visible {
        border: inherit;
        outline: inherit;
      }
    </style>
    <form id="form" part="form" method="dialog">
      <textarea id="textarea" part="textarea"></textarea>
    </form> `)];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = HTMLElement;
    var XTextarea = class extends _classSuper {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            XTextarea = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            __runInitializers(_classThis, _classExtraInitializers);
        }
        #getTextarea = genDomGetter(() => this.shadowRoot, '#textarea');
        get value() {
            return this.#getTextarea().value;
        }
        set value(val) {
            this.#getTextarea().value = val;
        }
        addText(params) {
            const { text } = params;
            const input = this.#getTextarea();
            const selectionStart = input.selectionStart;
            if (selectionStart === null) {
                input.value = text;
            }
            else {
                const currentValue = input.value;
                input.value = currentValue.slice(0, selectionStart)
                    + text
                    + currentValue.slice(selectionStart);
            }
        }
        setValue(params) {
            const input = this.#getTextarea();
            input.value = params.value;
            let cursorIndex;
            if ((cursorIndex = params.index)) {
                input.setSelectionRange(cursorIndex, cursorIndex);
            }
        }
        sendDelEvent(params) {
            let { action, length } = params;
            const input = this.#getTextarea();
            if (action === 1) {
                length = 1;
            }
            const selectionStart = input.selectionStart;
            if (selectionStart === null) {
                const currentValue = input.value;
                input.value = input.value.substring(0, currentValue.length - length);
            }
            else {
                const currentValue = input.value;
                input.value = currentValue.slice(0, selectionStart - length)
                    + currentValue.slice(selectionStart);
            }
        }
        select() {
            const input = this.#getTextarea();
            input.setSelectionRange(0, input.value.length);
        }
        setSelectionRange(params) {
            this.#getTextarea().setSelectionRange(params.selectionStart, params.selectionEnd);
        }
    };
    return XTextarea = _classThis;
})();
export { XTextarea };
//# sourceMappingURL=XTextarea.js.map