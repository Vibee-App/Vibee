import { __esDecorate, __runInitializers } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { bindToAttribute, bindToStyle, genDomGetter, registerAttributeHandler, } from '@lynx-js/web-elements-reactive';
import { XTextarea } from './XTextarea.js';
let Placeholder = (() => {
    let _private_updatePlaceholderColor_decorators;
    let _private_updatePlaceholderColor_initializers = [];
    let _private_updatePlaceholderColor_extraInitializers = [];
    let _private_updatePlaceholderFontSize_decorators;
    let _private_updatePlaceholderFontSize_initializers = [];
    let _private_updatePlaceholderFontSize_extraInitializers = [];
    let _private_updatePlaceholderFontWeight_decorators;
    let _private_updatePlaceholderFontWeight_initializers = [];
    let _private_updatePlaceholderFontWeight_extraInitializers = [];
    let _private_updatePlaceholderFontFamily_decorators;
    let _private_updatePlaceholderFontFamily_initializers = [];
    let _private_updatePlaceholderFontFamily_extraInitializers = [];
    let _private_handlePlaceholder_decorators;
    let _private_handlePlaceholder_initializers = [];
    let _private_handlePlaceholder_extraInitializers = [];
    return class Placeholder {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_updatePlaceholderColor_decorators = [registerAttributeHandler('placeholder-color', true)];
            _private_updatePlaceholderFontSize_decorators = [registerAttributeHandler('placeholder-font-size', true)];
            _private_updatePlaceholderFontWeight_decorators = [registerAttributeHandler('placeholder-font-weight', true)];
            _private_updatePlaceholderFontFamily_decorators = [registerAttributeHandler('placeholder-font-family', true)];
            _private_handlePlaceholder_decorators = [registerAttributeHandler('placeholder', true)];
            __esDecorate(null, null, _private_updatePlaceholderColor_decorators, { kind: "field", name: "#updatePlaceholderColor", static: false, private: true, access: { has: obj => #updatePlaceholderColor in obj, get: obj => obj.#updatePlaceholderColor, set: (obj, value) => { obj.#updatePlaceholderColor = value; } }, metadata: _metadata }, _private_updatePlaceholderColor_initializers, _private_updatePlaceholderColor_extraInitializers);
            __esDecorate(null, null, _private_updatePlaceholderFontSize_decorators, { kind: "field", name: "#updatePlaceholderFontSize", static: false, private: true, access: { has: obj => #updatePlaceholderFontSize in obj, get: obj => obj.#updatePlaceholderFontSize, set: (obj, value) => { obj.#updatePlaceholderFontSize = value; } }, metadata: _metadata }, _private_updatePlaceholderFontSize_initializers, _private_updatePlaceholderFontSize_extraInitializers);
            __esDecorate(null, null, _private_updatePlaceholderFontWeight_decorators, { kind: "field", name: "#updatePlaceholderFontWeight", static: false, private: true, access: { has: obj => #updatePlaceholderFontWeight in obj, get: obj => obj.#updatePlaceholderFontWeight, set: (obj, value) => { obj.#updatePlaceholderFontWeight = value; } }, metadata: _metadata }, _private_updatePlaceholderFontWeight_initializers, _private_updatePlaceholderFontWeight_extraInitializers);
            __esDecorate(null, null, _private_updatePlaceholderFontFamily_decorators, { kind: "field", name: "#updatePlaceholderFontFamily", static: false, private: true, access: { has: obj => #updatePlaceholderFontFamily in obj, get: obj => obj.#updatePlaceholderFontFamily, set: (obj, value) => { obj.#updatePlaceholderFontFamily = value; } }, metadata: _metadata }, _private_updatePlaceholderFontFamily_initializers, _private_updatePlaceholderFontFamily_extraInitializers);
            __esDecorate(null, null, _private_handlePlaceholder_decorators, { kind: "field", name: "#handlePlaceholder", static: false, private: true, access: { has: obj => #handlePlaceholder in obj, get: obj => obj.#handlePlaceholder, set: (obj, value) => { obj.#handlePlaceholder = value; } }, metadata: _metadata }, _private_handlePlaceholder_initializers, _private_handlePlaceholder_extraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = [
            'placeholder',
            'placeholder-color',
            'placeholder-font-size',
            'placeholder-font-weight',
            'placeholder-font-family',
        ];
        #getTextarea = genDomGetter(() => this.#dom.shadowRoot, '#textarea');
        #updatePlaceholderColor = __runInitializers(this, _private_updatePlaceholderColor_initializers, bindToStyle(this.#getTextarea, '--placeholder-color', undefined, true));
        #updatePlaceholderFontSize = (__runInitializers(this, _private_updatePlaceholderColor_extraInitializers), __runInitializers(this, _private_updatePlaceholderFontSize_initializers, bindToStyle(this.#getTextarea, '--placeholder-font-size', undefined, true)));
        #updatePlaceholderFontWeight = (__runInitializers(this, _private_updatePlaceholderFontSize_extraInitializers), __runInitializers(this, _private_updatePlaceholderFontWeight_initializers, bindToStyle(this.#getTextarea, '--placeholder-font-weight', undefined, true)));
        #updatePlaceholderFontFamily = (__runInitializers(this, _private_updatePlaceholderFontWeight_extraInitializers), __runInitializers(this, _private_updatePlaceholderFontFamily_initializers, bindToStyle(this.#getTextarea, '--placeholder-font-family', undefined, true)));
        #handlePlaceholder = (__runInitializers(this, _private_updatePlaceholderFontFamily_extraInitializers), __runInitializers(this, _private_handlePlaceholder_initializers, bindToAttribute(this.#getTextarea, 'placeholder')));
        #dom = __runInitializers(this, _private_handlePlaceholder_extraInitializers);
        constructor(dom) {
            this.#dom = dom;
        }
    };
})();
export { Placeholder };
//# sourceMappingURL=Placeholder.js.map