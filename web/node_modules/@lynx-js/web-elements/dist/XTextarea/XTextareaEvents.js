import { __esDecorate, __runInitializers, __setFunctionName } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { genDomGetter, registerAttributeHandler, } from '@lynx-js/web-elements-reactive';
import { commonComponentEventSetting } from '../common/commonEventInitConfiguration.js';
import { renameEvent } from '../common/renameEvent.js';
let XTextareaEvents = (() => {
    let _instanceExtraInitializers = [];
    let _private_handleEnableConfirmEvent_decorators;
    let _private_handleEnableConfirmEvent_descriptor;
    let _private_handleSendComposingInput_decorators;
    let _private_handleSendComposingInput_descriptor;
    return class XTextareaEvents {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_handleEnableConfirmEvent_decorators = [registerAttributeHandler('x-enable-input-event', true)];
            _private_handleSendComposingInput_decorators = [registerAttributeHandler('send-composing-input', true)];
            __esDecorate(this, _private_handleEnableConfirmEvent_descriptor = { value: __setFunctionName(function (newValue) {
                    const textareaElement = this.#getTextareaElement();
                    if (newValue !== null) {
                        textareaElement.addEventListener('input', this.#teleportInput, { passive: true });
                        textareaElement.addEventListener('compositionend', this.#teleportCompositionendInput, { passive: true });
                    }
                    else {
                        textareaElement.removeEventListener('input', this.#teleportInput);
                        textareaElement.removeEventListener('compositionend', this.#teleportCompositionendInput);
                    }
                }, "#handleEnableConfirmEvent") }, _private_handleEnableConfirmEvent_decorators, { kind: "method", name: "#handleEnableConfirmEvent", static: false, private: true, access: { has: obj => #handleEnableConfirmEvent in obj, get: obj => obj.#handleEnableConfirmEvent }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, _private_handleSendComposingInput_descriptor = { value: __setFunctionName(function (newVal) {
                    this.#sendComposingInput = newVal !== null;
                }, "#handleSendComposingInput") }, _private_handleSendComposingInput_decorators, { kind: "method", name: "#handleSendComposingInput", static: false, private: true, access: { has: obj => #handleSendComposingInput in obj, get: obj => obj.#handleSendComposingInput }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = ['x-enable-input-event', 'send-composing-input'];
        #dom = __runInitializers(this, _instanceExtraInitializers);
        #sendComposingInput = false;
        #getTextareaElement = genDomGetter(() => this.#dom.shadowRoot, '#textarea');
        #getFormElement = genDomGetter(() => this.#dom.shadowRoot, '#form');
        get #handleEnableConfirmEvent() { return _private_handleEnableConfirmEvent_descriptor.value; }
        get #handleSendComposingInput() { return _private_handleSendComposingInput_descriptor.value; }
        #teleportEvent = (event) => {
            const eventType = renameEvent[event.type] ?? event.type;
            this.#dom.dispatchEvent(new CustomEvent(eventType, {
                ...commonComponentEventSetting,
                detail: {
                    value: this.#getTextareaElement().value,
                },
            }));
        };
        #teleportInput = (event) => {
            const input = this.#getTextareaElement();
            const value = input.value;
            const isComposing = event.isComposing;
            if (isComposing && !this.#sendComposingInput)
                return;
            this.#dom.dispatchEvent(new CustomEvent('input', {
                ...commonComponentEventSetting,
                detail: {
                    value,
                    textLength: value.length,
                    cursor: input.selectionStart,
                    isComposing,
                },
            }));
        };
        #teleportCompositionendInput = () => {
            const input = this.#getTextareaElement();
            const value = input.value;
            // if #sendComposingInput set true, #teleportInput will send detail
            if (!this.#sendComposingInput) {
                this.#dom.dispatchEvent(new CustomEvent('input', {
                    ...commonComponentEventSetting,
                    detail: {
                        value,
                        textLength: value.length,
                        cursor: input.selectionStart,
                    },
                }));
            }
        };
        #blockHtmlEvent = (event) => {
            if (event.target === this.#getTextareaElement()
                && typeof event.detail === 'number') {
                event.stopImmediatePropagation();
            }
        };
        constructor(dom) {
            this.#dom = dom;
            const textareaElement = this.#getTextareaElement();
            const formElement = this.#getFormElement();
            textareaElement.addEventListener('blur', this.#teleportEvent, {
                passive: true,
            });
            textareaElement.addEventListener('focus', this.#teleportEvent, {
                passive: true,
            });
            formElement.addEventListener('submit', this.#teleportEvent, {
                passive: true,
            });
            // use form to stop propagation
            formElement.addEventListener('input', this.#blockHtmlEvent, {
                passive: true,
            });
        }
    };
})();
export { XTextareaEvents };
//# sourceMappingURL=XTextareaEvents.js.map