import { __esDecorate, __runInitializers } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { bindToAttribute, genDomGetter, registerAttributeHandler, } from '@lynx-js/web-elements-reactive';
let TextareaBaseAttributes = (() => {
    let _private_handlerConfirmType_decorators;
    let _private_handlerConfirmType_initializers = [];
    let _private_handlerConfirmType_extraInitializers = [];
    let _private_handlerMaxlength_decorators;
    let _private_handlerMaxlength_initializers = [];
    let _private_handlerMaxlength_extraInitializers = [];
    let _private_handleReadonly_decorators;
    let _private_handleReadonly_initializers = [];
    let _private_handleReadonly_extraInitializers = [];
    let _private_handleSpellCheck_decorators;
    let _private_handleSpellCheck_initializers = [];
    let _private_handleSpellCheck_extraInitializers = [];
    let _private_handleShowSoftInputOnfocus_decorators;
    let _private_handleShowSoftInputOnfocus_initializers = [];
    let _private_handleShowSoftInputOnfocus_extraInitializers = [];
    return class TextareaBaseAttributes {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_handlerConfirmType_decorators = [registerAttributeHandler('confirm-type', true)];
            _private_handlerMaxlength_decorators = [registerAttributeHandler('maxlength', true)];
            _private_handleReadonly_decorators = [registerAttributeHandler('readonly', true)];
            _private_handleSpellCheck_decorators = [registerAttributeHandler('ios-spell-check', true)];
            _private_handleShowSoftInputOnfocus_decorators = [registerAttributeHandler('show-soft-input-onfocus', true)];
            __esDecorate(null, null, _private_handlerConfirmType_decorators, { kind: "field", name: "#handlerConfirmType", static: false, private: true, access: { has: obj => #handlerConfirmType in obj, get: obj => obj.#handlerConfirmType, set: (obj, value) => { obj.#handlerConfirmType = value; } }, metadata: _metadata }, _private_handlerConfirmType_initializers, _private_handlerConfirmType_extraInitializers);
            __esDecorate(null, null, _private_handlerMaxlength_decorators, { kind: "field", name: "#handlerMaxlength", static: false, private: true, access: { has: obj => #handlerMaxlength in obj, get: obj => obj.#handlerMaxlength, set: (obj, value) => { obj.#handlerMaxlength = value; } }, metadata: _metadata }, _private_handlerMaxlength_initializers, _private_handlerMaxlength_extraInitializers);
            __esDecorate(null, null, _private_handleReadonly_decorators, { kind: "field", name: "#handleReadonly", static: false, private: true, access: { has: obj => #handleReadonly in obj, get: obj => obj.#handleReadonly, set: (obj, value) => { obj.#handleReadonly = value; } }, metadata: _metadata }, _private_handleReadonly_initializers, _private_handleReadonly_extraInitializers);
            __esDecorate(null, null, _private_handleSpellCheck_decorators, { kind: "field", name: "#handleSpellCheck", static: false, private: true, access: { has: obj => #handleSpellCheck in obj, get: obj => obj.#handleSpellCheck, set: (obj, value) => { obj.#handleSpellCheck = value; } }, metadata: _metadata }, _private_handleSpellCheck_initializers, _private_handleSpellCheck_extraInitializers);
            __esDecorate(null, null, _private_handleShowSoftInputOnfocus_decorators, { kind: "field", name: "#handleShowSoftInputOnfocus", static: false, private: true, access: { has: obj => #handleShowSoftInputOnfocus in obj, get: obj => obj.#handleShowSoftInputOnfocus, set: (obj, value) => { obj.#handleShowSoftInputOnfocus = value; } }, metadata: _metadata }, _private_handleShowSoftInputOnfocus_initializers, _private_handleShowSoftInputOnfocus_extraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = [
            'confirm-type',
            'maxlength',
            'readonly',
            'type',
            'ios-spell-check',
            'spell-check',
            'show-soft-input-onfocus',
        ];
        #dom;
        #getTextareaElement = genDomGetter(() => this.#dom.shadowRoot, '#textarea');
        #handlerConfirmType = __runInitializers(this, _private_handlerConfirmType_initializers, bindToAttribute(this.#getTextareaElement, 'enterkeyhint', (val) => {
            if (val === null)
                return 'send';
            return val;
        }));
        #handlerMaxlength = (__runInitializers(this, _private_handlerConfirmType_extraInitializers), __runInitializers(this, _private_handlerMaxlength_initializers, bindToAttribute(this.#getTextareaElement, 'maxlength', (val) => {
            if (val === null)
                return '140';
            return val;
        })));
        #handleReadonly = (__runInitializers(this, _private_handlerMaxlength_extraInitializers), __runInitializers(this, _private_handleReadonly_initializers, bindToAttribute(this.#getTextareaElement, 'readonly', (value) => (value !== null ? '' : null))));
        #handleSpellCheck = (__runInitializers(this, _private_handleReadonly_extraInitializers), __runInitializers(this, _private_handleSpellCheck_initializers, bindToAttribute(this.#getTextareaElement, 'spellcheck', (value) => (value === null ? 'false' : 'true'))));
        #handleShowSoftInputOnfocus = (__runInitializers(this, _private_handleSpellCheck_extraInitializers), __runInitializers(this, _private_handleShowSoftInputOnfocus_initializers, bindToAttribute(this.#getTextareaElement, 'virtualkeyboardpolicy', (value) => (value === null ? 'manual' : 'auto'))));
        constructor(dom) {
            __runInitializers(this, _private_handleShowSoftInputOnfocus_extraInitializers);
            this.#dom = dom;
        }
    };
})();
export { TextareaBaseAttributes };
//# sourceMappingURL=TextareaBaseAttributes.js.map