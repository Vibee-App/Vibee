import { __esDecorate, __runInitializers, __setFunctionName } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { bindToAttribute, genDomGetter, registerAttributeHandler, bindToStyle, } from '@lynx-js/web-elements-reactive';
let XTextareaAttributes = (() => {
    let _instanceExtraInitializers = [];
    let _private_handleConfirmEnter_decorators;
    let _private_handleConfirmEnter_descriptor;
    let _private_handleDisabled_decorators;
    let _private_handleDisabled_initializers = [];
    let _private_handleDisabled_extraInitializers = [];
    let _private_handleMaxHeight_decorators;
    let _private_handleMaxHeight_initializers = [];
    let _private_handleMaxHeight_extraInitializers = [];
    let _private_handleMinHeight_decorators;
    let _private_handleMinHeight_initializers = [];
    let _private_handleMinHeight_extraInitializers = [];
    let _private_handleValue_decorators;
    let _private_handleValue_descriptor;
    return class XTextareaAttributes {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _private_handleConfirmEnter_decorators = [registerAttributeHandler('confirm-enter', true)];
            _private_handleDisabled_decorators = [registerAttributeHandler('disabled', true)];
            _private_handleMaxHeight_decorators = [registerAttributeHandler('max-height', true)];
            _private_handleMinHeight_decorators = [registerAttributeHandler('min-height', true)];
            _private_handleValue_decorators = [registerAttributeHandler('value', false)];
            __esDecorate(this, _private_handleConfirmEnter_descriptor = { value: __setFunctionName(function (newVal) {
                    this.#confirmEnter = newVal !== null;
                }, "#handleConfirmEnter") }, _private_handleConfirmEnter_decorators, { kind: "method", name: "#handleConfirmEnter", static: false, private: true, access: { has: obj => #handleConfirmEnter in obj, get: obj => obj.#handleConfirmEnter }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, _private_handleValue_descriptor = { value: __setFunctionName(function (newValue) {
                    if (newValue) {
                        const maxlength = parseFloat(this.#dom.getAttribute('maxlength') ?? '');
                        if (!isNaN(maxlength))
                            newValue = newValue.substring(0, maxlength);
                    }
                    else {
                        newValue = '';
                    }
                    const textarea = this.#getTextareaElement();
                    if (textarea.value !== newValue) {
                        textarea.value = newValue;
                    }
                }, "#handleValue") }, _private_handleValue_decorators, { kind: "method", name: "#handleValue", static: false, private: true, access: { has: obj => #handleValue in obj, get: obj => obj.#handleValue }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(null, null, _private_handleDisabled_decorators, { kind: "field", name: "#handleDisabled", static: false, private: true, access: { has: obj => #handleDisabled in obj, get: obj => obj.#handleDisabled, set: (obj, value) => { obj.#handleDisabled = value; } }, metadata: _metadata }, _private_handleDisabled_initializers, _private_handleDisabled_extraInitializers);
            __esDecorate(null, null, _private_handleMaxHeight_decorators, { kind: "field", name: "#handleMaxHeight", static: false, private: true, access: { has: obj => #handleMaxHeight in obj, get: obj => obj.#handleMaxHeight, set: (obj, value) => { obj.#handleMaxHeight = value; } }, metadata: _metadata }, _private_handleMaxHeight_initializers, _private_handleMaxHeight_extraInitializers);
            __esDecorate(null, null, _private_handleMinHeight_decorators, { kind: "field", name: "#handleMinHeight", static: false, private: true, access: { has: obj => #handleMinHeight in obj, get: obj => obj.#handleMinHeight, set: (obj, value) => { obj.#handleMinHeight = value; } }, metadata: _metadata }, _private_handleMinHeight_initializers, _private_handleMinHeight_extraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = [
            'confirm-enter',
            'disabled',
            'max-height',
            'min-height',
            'value',
        ];
        #dom = __runInitializers(this, _instanceExtraInitializers);
        #getTextareaElement = genDomGetter(() => this.#dom.shadowRoot, '#textarea');
        #getFormElement = genDomGetter(() => this.#dom.shadowRoot, '#form');
        #confirmEnter = false;
        get #handleConfirmEnter() { return _private_handleConfirmEnter_descriptor.value; }
        #handleDisabled = __runInitializers(this, _private_handleDisabled_initializers, bindToAttribute(this.#getTextareaElement, 'disabled', (value) => (value !== null ? '' : null)));
        #handleMaxHeight = (__runInitializers(this, _private_handleDisabled_extraInitializers), __runInitializers(this, _private_handleMaxHeight_initializers, bindToStyle(this.#getTextareaElement, 'max-height')));
        #handleMinHeight = (__runInitializers(this, _private_handleMaxHeight_extraInitializers), __runInitializers(this, _private_handleMinHeight_initializers, bindToStyle(this.#getTextareaElement, 'min-height')));
        get #handleValue() { return _private_handleValue_descriptor.value; }
        #handleKeyEvent = (__runInitializers(this, _private_handleMinHeight_extraInitializers), (event) => {
            if (this.#confirmEnter && event.key === 'Enter') {
                this.#getFormElement().dispatchEvent(new SubmitEvent('submit'));
            }
        });
        constructor(dom) {
            this.#dom = dom;
            this.#getTextareaElement().addEventListener('keyup', this.#handleKeyEvent);
        }
    };
})();
export { XTextareaAttributes };
//# sourceMappingURL=XTextareaAttributes.js.map