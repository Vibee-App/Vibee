import { __esDecorate, __runInitializers } from "tslib";
/*
// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
*/
import { bindToAttribute, genDomGetter, registerAttributeHandler, } from '@lynx-js/web-elements-reactive';
import { commonComponentEventSetting } from '../common/commonEventInitConfiguration.js';
let CanvasAttributes = (() => {
    let _handleName_decorators;
    let _handleName_initializers = [];
    let _handleName_extraInitializers = [];
    let _handleHeight_decorators;
    let _handleHeight_initializers = [];
    let _handleHeight_extraInitializers = [];
    let _handleWidth_decorators;
    let _handleWidth_initializers = [];
    let _handleWidth_extraInitializers = [];
    return class CanvasAttributes {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _handleName_decorators = [registerAttributeHandler('name', true)];
            _handleHeight_decorators = [registerAttributeHandler('height', true)];
            _handleWidth_decorators = [registerAttributeHandler('height', true)];
            __esDecorate(null, null, _handleName_decorators, { kind: "field", name: "handleName", static: false, private: false, access: { has: obj => "handleName" in obj, get: obj => obj.handleName, set: (obj, value) => { obj.handleName = value; } }, metadata: _metadata }, _handleName_initializers, _handleName_extraInitializers);
            __esDecorate(null, null, _handleHeight_decorators, { kind: "field", name: "handleHeight", static: false, private: false, access: { has: obj => "handleHeight" in obj, get: obj => obj.handleHeight, set: (obj, value) => { obj.handleHeight = value; } }, metadata: _metadata }, _handleHeight_initializers, _handleHeight_extraInitializers);
            __esDecorate(null, null, _handleWidth_decorators, { kind: "field", name: "handleWidth", static: false, private: false, access: { has: obj => "handleWidth" in obj, get: obj => obj.handleWidth, set: (obj, value) => { obj.handleWidth = value; } }, metadata: _metadata }, _handleWidth_initializers, _handleWidth_extraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        static observedAttributes = ['name', 'height', 'width'];
        #dom;
        #resizeObserver;
        #getCanvas = genDomGetter(() => this.#dom.shadowRoot, '#canvas');
        constructor(dom) {
            this.#dom = dom;
        }
        handleName = __runInitializers(this, _handleName_initializers, bindToAttribute(this.#getCanvas, 'name'));
        handleHeight = (__runInitializers(this, _handleName_extraInitializers), __runInitializers(this, _handleHeight_initializers, bindToAttribute(this.#getCanvas, 'height')));
        handleWidth = (__runInitializers(this, _handleHeight_extraInitializers), __runInitializers(this, _handleWidth_initializers, bindToAttribute(this.#getCanvas, 'width')));
        #resizeHandler = (__runInitializers(this, _handleWidth_extraInitializers), (entries) => {
            const { contentRect } = entries[0];
            const canvas = this.#dom.shadowRoot.firstElementChild;
            if (canvas) {
                let { height, width } = contentRect;
                height = height * window.devicePixelRatio;
                width = width * window.devicePixelRatio;
                const resizeEvent = new CustomEvent('resize', {
                    ...commonComponentEventSetting,
                    detail: {
                        height,
                        width,
                    },
                });
                resizeEvent.height = height;
                resizeEvent.width = width;
                canvas.dispatchEvent(resizeEvent);
            }
        });
        #startResizeObserver() {
            if (!this.#resizeObserver) {
                this.#resizeObserver = new ResizeObserver(this.#resizeHandler);
                this.#resizeObserver.observe(this.#dom);
            }
        }
        #stopResizeObserver() {
            this.#resizeObserver?.disconnect();
            this.#resizeObserver = undefined;
        }
        connectedCallback() {
            this.#startResizeObserver();
        }
        dispose() {
            this.#stopResizeObserver();
        }
    };
})();
export { CanvasAttributes };
//# sourceMappingURL=CanvasAttributes.js.map