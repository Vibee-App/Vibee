import { type Cloneable, type NativeModulesCall, type UpdateDataType } from '@lynx-js/web-constants';
/**
 * @param {string} url [required] The url of the entry of your Lynx card
 * @param {Cloneable} globalProps [optional] The globalProps value of this Lynx card
 * @param {Cloneable} initData [oprional] The initial data of this Lynx card
 * @param {Record<string,string>} overrideLynxTagToHTMLTagMap [optional] use this property/attribute to override the lynx tag -> html tag map
 * @param {string} nativeModulesUrl [optional] It is a esm url, use to customize NativeModules.
 * @param {INativeModulesCall} onNativeModulesCall [optional] the NativeModules value handler. Arguments will be cached before this property is assigned.
 * @param {"auto" | null} height [optional] set it to "auto" for height auto-sizing
 * @param {"auto" | null} width [optional] set it to "auto" for width auto-sizing
 *
 * @property entryId the currently Lynx view entryId.
 *
 * @event error lynx card fired an error
 *
 * @example
 * HTML Exmaple
 *
 * Note that you should declarae the size of lynx-view
 *
 * ```html
 * <lynx-view url="https://path/to/main-thread.js" rawData="{}" globalProps="{}" style="height:300px;width:300px">
 * </lynx-view>
 * ```
 *
 * React 19 Example
 * ```jsx
 * <lynx-view url={myLynxCardUrl} rawData={{}} globalProps={{}} style={{height:'300px', width:'300px'}}>
 * </lynx-vew>
 * ```
 */
export declare class LynxView extends HTMLElement {
    #private;
    static lynxViewCount: number;
    static tag: "lynx-view";
    private static observedAttributeAsProperties;
    private static attributeCamelCaseMap;
    /**
     * @private
     */
    static observedAttributes: string[];
    /**
     * @public
     * @property the url of lynx view output entry file
     */
    get url(): string | undefined;
    set url(val: string);
    /**
     * @public
     * @property globalProps
     * @default {}
     */
    get globalProps(): Cloneable;
    set globalProps(val: string | Cloneable);
    /**
     * @public
     * @property initData
     * @default {}
     */
    get initData(): Cloneable;
    set initData(val: string | Cloneable);
    /**
     * @public
     * @readonly
     * @property
     * The random generated entryId of current lynxview
     */
    get entryId(): string | undefined;
    /**
     * @public
     * @property
     * @default {page: 'div'}
     */
    get overrideLynxTagToHTMLTagMap(): Record<string, string>;
    set overrideLynxTagToHTMLTagMap(val: string | Record<string, string>);
    /**
     * @param
     * @property
     */
    get onNativeModulesCall(): NativeModulesCall | undefined;
    set onNativeModulesCall(handler: NativeModulesCall);
    /**
     * @public
     * @property nativeModules
     */
    get nativeModulesUrl(): string | undefined;
    set nativeModulesUrl(val: string);
    /**
     * @public
     * "auto" for auto calculated height
     */
    get height(): string | null;
    /**
     * @public
     * "auto" for auto calculated width
     */
    get width(): string | null;
    set height(val: string | null);
    set width(val: string | null);
    /**
     * @public
     * @method
     * update the `__initData` and trigger essential flow
     */
    updateData(data: Cloneable, updateDataType: UpdateDataType, callback?: () => void): void;
    /**
     * @public
     * @method
     * send global events, which can be listened to using the GlobalEventEmitter
     */
    sendGlobalEvent(eventName: string, params: Cloneable[]): void;
    /**
     * @public
     * @method
     * reload the current page
     */
    reload(): void;
    /**
     * @override
     * "false" value will be omitted
     *
     * {@inheritdoc HTMLElement.setAttribute}
     */
    setAttribute(qualifiedName: string, value: string): void;
    /**
     * @private
     */
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    /**
     * @private
     */
    disconnectedCallback(): void;
    /**
     * @private
     */
    connectedCallback(): void;
}
