import { lynxUniqueIdAttribute, postExposureEndpoint, switchExposureService, } from '@lynx-js/web-constants';
import { createCrossThreadEvent } from '../../utils/createCrossThreadEvent.js';
export function createExposureService(rpc, rootDom) {
    let working = true;
    let exposureCache = [];
    let disexposureCache = [];
    const onScreen = new Map();
    async function exposureEventHandler(ev) {
        const exposureEvent = createCrossThreadEvent(ev);
        exposureEvent.detail['unique-id'] = parseFloat(ev.target.getAttribute(lynxUniqueIdAttribute));
        const exposureID = exposureEvent.exposureID;
        if (ev.type === 'exposure') {
            exposureCache.push(exposureEvent);
            onScreen.set(exposureID, exposureEvent);
        }
        else {
            disexposureCache.push(exposureEvent);
            onScreen.delete(exposureID);
        }
    }
    setInterval(() => {
        if (exposureCache.length > 0 || disexposureCache.length > 0) {
            const currentExposure = exposureCache;
            const currentDisexposure = disexposureCache;
            exposureCache = [];
            disexposureCache = [];
            rpc.invoke(postExposureEndpoint, [{
                    exposures: currentExposure,
                    disExposures: currentDisexposure,
                }]);
        }
    }, 1000 / 20);
    rootDom.addEventListener('exposure', exposureEventHandler, { passive: true });
    rootDom.addEventListener('disexposure', exposureEventHandler, {
        passive: true,
    });
    rpc.registerHandler(switchExposureService, async (enable, sendEvent) => {
        if (enable && !working) {
            // send all onScreen info
            rpc.invoke(postExposureEndpoint, [{
                    exposures: [...onScreen.values()],
                    disExposures: [],
                }]);
        }
        else if (!enable && working) {
            if (sendEvent) {
                rpc.invoke(postExposureEndpoint, [{
                        exposures: [],
                        disExposures: [...onScreen.values()],
                    }]);
            }
        }
    });
}
//# sourceMappingURL=createExposureService.js.map