// Copyright 2023 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
import { nativeModulesCallEndpoint, switchExposureService, } from '@lynx-js/web-constants';
export function createNativeModules(rpc, customNativeModules) {
    const switchExposure = rpc.createCall(switchExposureService);
    const nativeModulesCall = rpc.createCall(nativeModulesCallEndpoint);
    const lynxExposureModule = {
        resumeExposure() {
            switchExposure(true, true);
        },
        stopExposure(param) {
            switchExposure(false, param.sendEvent ?? true);
        },
    };
    const bridgeModule = {
        call(name, data, callback) {
            nativeModulesCall(name, data, 'bridge').then(callback);
        },
    };
    return {
        bridge: bridgeModule,
        LynxExposureModule: lynxExposureModule,
        ...recursiveFunctionCallBinder(nativeModulesCall, customNativeModules),
    };
}
function recursiveFunctionCallBinder(nativeModulesCall, customNativeModules) {
    const newObj = Object.fromEntries(Object.entries(customNativeModules).map(([moduleName, moduleImpl]) => {
        if (typeof moduleImpl === 'object') {
            for (const [property, value] of Object.entries(moduleImpl)) {
                if (typeof value === 'function') {
                    moduleImpl[property] = bindThisContext({
                        nativeModulesCall,
                        moduleName,
                        func: value,
                    });
                }
            }
        }
        return [moduleName, moduleImpl];
    }));
    return newObj;
}
function bindThisContext({ nativeModulesCall, moduleName, func }) {
    const context = {
        nativeModulesCall(name, data) {
            return nativeModulesCall(name, data, moduleName);
        },
    };
    return func.bind(context);
}
//# sourceMappingURL=createNativeModules.js.map