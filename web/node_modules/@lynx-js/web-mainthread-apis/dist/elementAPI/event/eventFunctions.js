export function __AddEvent(element, eventType, eventName, eventHandler) {
    element.setEventHandler(eventName, eventHandler, eventType);
}
export function __GetEvent(element, eventName, eventType) {
    const lynxEventName = eventName.toLowerCase();
    const eventHandlerMap = element.eventHandlerMap;
    const currentHandlerInfo = eventHandlerMap[lynxEventName];
    if (currentHandlerInfo?.type === eventType) {
        return currentHandlerInfo.handler;
    }
    return;
}
export function __GetEvents(element) {
    const eventHandlerMap = element.eventHandlerMap;
    return Object.entries(eventHandlerMap).map(([lynxEventName, info]) => {
        if (info) {
            return {
                type: info.type,
                function: info.handler,
                name: lynxEventName,
            };
        }
        return;
    }).filter(e => e);
}
export function __SetEvents(element, listeners) {
    for (const { type: eventType, name: lynxEventName, function: eventHandler } of listeners) {
        __AddEvent(element, eventType, lynxEventName, eventHandler);
    }
}
//# sourceMappingURL=eventFunctions.js.map