import { componentIdAttribute, cssIdAttribute } from '@lynx-js/web-constants';
import type { ElementOperation, LynxCrossThreadEvent, LynxEventType, PageConfig, CssInJsInfo } from '@lynx-js/web-constants';
export declare enum RefCountType {
    Element = 0
}
export declare class ElementThreadElement {
    tag: string;
    uniqueId: number;
    readonly pageConfig: PageConfig;
    private operationsRef;
    styleInfo: CssInJsInfo;
    static uniqueIdToElement: (WeakRef<ElementThreadElement> | undefined)[];
    static receiveEvent(event: LynxCrossThreadEvent): void;
    static getElementByUniqueId(uniqueId: number): ElementThreadElement | undefined;
    type: RefCountType;
    eventHandlerMap: Record<string, {
        type: LynxEventType;
        handler: ((ev: LynxCrossThreadEvent) => void) | string;
    } | undefined>;
    attributes: {
        id?: string;
        [componentIdAttribute]?: string;
        style: string | null;
        class: string | null;
        [cssIdAttribute]: string | null;
        [key: string]: string | undefined | null;
    };
    property: {
        parent?: ElementThreadElement;
        componentConfig: Record<string, unknown>;
        dataset: Record<string, unknown>;
        [key: string]: unknown;
    };
    children: ElementThreadElement[];
    parent?: ElementThreadElement;
    constructor(tag: string, uniqueId: number, pageConfig: PageConfig, operationsRef: {
        operations: ElementOperation[];
    }, styleInfo: CssInJsInfo);
    setProperty(key: string, value: any): void;
    setDatasetProperty(key: string, value: any): void;
    setAttribute(key: string, value: string | null): void;
    getAttribute<T extends keyof ElementThreadElement['attributes']>(key: T): ElementThreadElement['attributes'][T];
    appendChild(children: ElementThreadElement[]): void;
    removeChild(child: ElementThreadElement): ElementThreadElement;
    replaceWithElements(newElements: ElementThreadElement[]): void;
    swapWith(elementB: ElementThreadElement): void;
    insertBefore(child: ElementThreadElement, ref?: ElementThreadElement | null): ElementThreadElement;
    updateCssInJsGeneratedStyle(classStyleStr: string): void;
    setStyleProperty(key: string, value: string | null, important?: boolean): void;
    setEventHandler(ename: string, handler: ((ev: LynxCrossThreadEvent) => void) | string | undefined, eventType: LynxEventType): void;
    get firstElementChild(): ElementThreadElement | undefined;
    get lastElementChild(): ElementThreadElement | undefined;
    get nextElementSibling(): ElementThreadElement | undefined;
}
export type ComponentAtIndexCallback = (list: ListElement, listID: number, cellIndex: number, operationID: number, enableReuseNotification: boolean) => void;
export type EnqueueComponentCallback = (list: ListElement, listID: number, sign: number) => void;
type UpdateListInfoAttributeValue = {
    insertAction: {
        position: number;
    }[];
    removeAction: {
        position: number;
    }[];
};
export declare class ListElement extends ElementThreadElement {
    componentAtIndex: ComponentAtIndexCallback;
    enqueueComponent: EnqueueComponentCallback;
    setAttribute(key: 'update-list-info', value: UpdateListInfoAttributeValue): void;
    setAttribute(key: Exclude<string, 'update-list-info'>, value: string | null): void;
}
export {};
