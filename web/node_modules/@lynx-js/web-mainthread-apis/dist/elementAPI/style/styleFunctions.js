import { cssIdAttribute } from '@lynx-js/web-constants';
import hyphenateStyleName from 'hyphenate-style-name';
import { queryCSSProperty } from './cssPropertyMap.js';
import { decodeCssInJs } from '../../utils/decodeCssInJs.js';
import { transformInlineStyleString, transfromParsedStyles, } from './transformInlineStyle.js';
function updateInlineStyleForCssInJs(element, newClassNames) {
    const classStyleStr = decodeCssInJs(newClassNames, element.styleInfo, element.attributes[cssIdAttribute]);
    element.updateCssInJsGeneratedStyle(classStyleStr);
}
export function __AddClass(element, className) {
    const newClassName = ((element.attributes.class ?? '') + ' ' + className)
        .trim();
    element.setAttribute('class', newClassName);
    if (!element.pageConfig.enableCSSSelector) {
        updateInlineStyleForCssInJs(element, newClassName);
    }
}
export function __SetClasses(element, classNames) {
    element.setAttribute('class', classNames);
    if (!element.pageConfig.enableCSSSelector) {
        updateInlineStyleForCssInJs(element, classNames ?? '');
    }
}
export function __GetClasses(element) {
    return (element.attributes.class ?? '').split(' ').filter(e => e);
}
export function __AddInlineStyle(element, key, value) {
    const lynxStyleInfo = queryCSSProperty(Number(key));
    if (!value) {
        element.setStyleProperty(lynxStyleInfo.dashName, null);
        return;
    }
    const { transformedStyle } = transfromParsedStyles([[
            lynxStyleInfo.dashName,
            value,
        ]]);
    for (const [property, value] of transformedStyle) {
        element.setStyleProperty(property, value);
    }
}
export function __SetInlineStyles(element, value) {
    if (!value)
        return;
    const { transformedStyle } = typeof value === 'string'
        ? transformInlineStyleString(value)
        : transfromParsedStyles(Object.entries(value).map(([k, value]) => [
            hyphenateStyleName(k),
            value,
        ]));
    const transformedStyleStr = transformedStyle.map(([property, value]) => `${property}:${value};`).join('');
    element.setAttribute('style', transformedStyleStr);
}
export function __SetCSSId(elements, cssId) {
    cssId = cssId.toString();
    for (const element of elements) {
        if (element.getAttribute(cssIdAttribute) === cssId)
            continue; // skip operation
        element.setAttribute(cssIdAttribute, cssId);
        if (!element.pageConfig.enableCSSSelector) {
            const cls = element.getAttribute('class');
            cls && __SetClasses(element, cls);
        }
    }
}
//# sourceMappingURL=styleFunctions.js.map