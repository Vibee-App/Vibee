// Copyright 2023 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
import {} from '@lynx-js/web-constants';
import { globalMuteableVars } from '@lynx-js/web-constants';
import { createMainThreadLynx } from './MainThreadLynx.js';
import { initializeElementCreatingFunction } from './elementAPI/elementCreating/elementCreatingFunctions.js';
import * as attributeAndPropertyApis from './elementAPI/attributeAndProperty/attributeAndPropertyFunctions.js';
import * as domTreeApis from './elementAPI/domTree/domTreeFunctions.js';
import * as eventApis from './elementAPI/event/eventFunctions.js';
import * as styleApis from './elementAPI/style/styleFunctions.js';
import { flattenStyleInfo, genCssContent, genCssInJsInfo, transformToWebCss, } from './utils/processStyleInfo.js';
export class MainThreadRuntime {
    config;
    isFp = true;
    operationsRef = {
        operations: [],
    };
    constructor(config) {
        this.config = config;
        this.__globalProps = config.globalProps;
        this.lynx = createMainThreadLynx(config, this);
        flattenStyleInfo(this.config.styleInfo);
        transformToWebCss(this.config.styleInfo);
        const cssInJs = this.config.pageConfig.enableCSSSelector
            ? {}
            : genCssInJsInfo(this.config.styleInfo);
        Object.assign(this, attributeAndPropertyApis, domTreeApis, eventApis, styleApis, initializeElementCreatingFunction({
            operationsRef: this.operationsRef,
            pageConfig: config.pageConfig,
            onNewTag: config.callbacks.onNewTag,
            styleInfo: cssInJs,
        }));
        this.__LoadLepusChunk = (path) => {
            try {
                this.lynx.requireModule(path);
                return true;
            }
            catch {
            }
            return false;
        };
        this._ReportError = this.config.callbacks._ReportError;
        this.__OnLifecycleEvent = this.config.callbacks.__OnLifecycleEvent;
        Object.defineProperty(this, 'renderPage', {
            get: () => {
                return this.#renderPage;
            },
            set: (val) => {
                this.#renderPage = val;
                queueMicrotask(this.config.callbacks.mainChunkReady);
            },
        });
        for (const nm of globalMuteableVars) {
            Object.defineProperty(this, nm, {
                get: () => {
                    return this.__lynxGlobalBindingValues[nm];
                },
                set: (v) => {
                    this.__lynxGlobalBindingValues[nm] = v;
                    this._updateVars?.();
                },
            });
        }
    }
    /**
     * @private
     */
    __lynxGlobalBindingValues = {};
    get globalThis() {
        return this;
    }
    lynx;
    NativeModules = undefined;
    __globalProps;
    processData;
    #renderPage;
    _ReportError;
    __OnLifecycleEvent;
    __LoadLepusChunk;
    __FlushElementTree = (_subTree, options) => {
        const operations = this.operationsRef.operations;
        this.operationsRef.operations = [];
        this.config.callbacks.flushElementTree(operations, options, this.isFp
            ? genCssContent(this.config.styleInfo, this.config.entryId, this.config.pageConfig, this.config.browserConfig)
            : undefined);
        this.isFp = false;
    };
    updatePage;
    _updateVars;
}
//# sourceMappingURL=MainThreadRuntime.js.map