import { type ElementOperation, type LynxLifecycleEvent, type LynxTemplate, type PageConfig, type ProcessDataCallback, type StyleInfo, type FlushElementTreeOptions, type Cloneable, type BrowserConfig } from '@lynx-js/web-constants';
import { type MainThreadLynx } from './MainThreadLynx.js';
export interface MainThreadRuntimeCallbacks {
    mainChunkReady: () => void;
    onNewTag: (tag: string) => void;
    flushElementTree: (operations: ElementOperation[], options: FlushElementTreeOptions, styleContent?: string) => void;
    _ReportError: (error: Error, info?: unknown) => void;
    __OnLifecycleEvent: (lynxLifecycleEvents: LynxLifecycleEvent) => void;
    markTiming: (pipelineId: string, timingKey: string) => void;
}
export interface MainThreadConfig {
    pageConfig: PageConfig;
    globalProps: unknown;
    callbacks: MainThreadRuntimeCallbacks;
    styleInfo: StyleInfo;
    customSections: LynxTemplate['customSections'];
    lepusCode: LynxTemplate['lepusCode'];
    entryId: string;
    browserConfig: BrowserConfig;
}
export declare class MainThreadRuntime {
    #private;
    private config;
    private isFp;
    operationsRef: {
        operations: ElementOperation[];
    };
    constructor(config: MainThreadConfig);
    /**
     * @private
     */
    __lynxGlobalBindingValues: Record<string, any>;
    get globalThis(): this;
    lynx: MainThreadLynx;
    NativeModules: undefined;
    __globalProps: unknown;
    processData?: ProcessDataCallback;
    renderPage: (data: unknown) => void;
    _ReportError: (e: Error, info: unknown) => void;
    __OnLifecycleEvent: (lynxLifecycleEvents: LynxLifecycleEvent) => void;
    __LoadLepusChunk: (path: string) => boolean;
    __FlushElementTree: (_subTree: unknown, options: FlushElementTreeOptions) => void;
    updatePage?: (data: Cloneable, options?: Record<string, string>) => void;
    _updateVars?: () => void;
}
